
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model avaliacoes
 * 
 */
export type avaliacoes = $Result.DefaultSelection<Prisma.$avaliacoesPayload>
/**
 * Model historicotransacoes
 * 
 */
export type historicotransacoes = $Result.DefaultSelection<Prisma.$historicotransacoesPayload>
/**
 * Model livros
 * 
 */
export type livros = $Result.DefaultSelection<Prisma.$livrosPayload>
/**
 * Model mensagenschat
 * 
 */
export type mensagenschat = $Result.DefaultSelection<Prisma.$mensagenschatPayload>
/**
 * Model trocas
 * 
 */
export type trocas = $Result.DefaultSelection<Prisma.$trocasPayload>
/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const status_enum: {
  pendente: 'pendente',
  aprovado: 'aprovado',
  rejeitado: 'rejeitado'
};

export type status_enum = (typeof status_enum)[keyof typeof status_enum]

}

export type status_enum = $Enums.status_enum

export const status_enum: typeof $Enums.status_enum

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Avaliacoes
 * const avaliacoes = await prisma.avaliacoes.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Avaliacoes
   * const avaliacoes = await prisma.avaliacoes.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.avaliacoes`: Exposes CRUD operations for the **avaliacoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avaliacoes
    * const avaliacoes = await prisma.avaliacoes.findMany()
    * ```
    */
  get avaliacoes(): Prisma.avaliacoesDelegate<ExtArgs>;

  /**
   * `prisma.historicotransacoes`: Exposes CRUD operations for the **historicotransacoes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historicotransacoes
    * const historicotransacoes = await prisma.historicotransacoes.findMany()
    * ```
    */
  get historicotransacoes(): Prisma.historicotransacoesDelegate<ExtArgs>;

  /**
   * `prisma.livros`: Exposes CRUD operations for the **livros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Livros
    * const livros = await prisma.livros.findMany()
    * ```
    */
  get livros(): Prisma.livrosDelegate<ExtArgs>;

  /**
   * `prisma.mensagenschat`: Exposes CRUD operations for the **mensagenschat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensagenschats
    * const mensagenschats = await prisma.mensagenschat.findMany()
    * ```
    */
  get mensagenschat(): Prisma.mensagenschatDelegate<ExtArgs>;

  /**
   * `prisma.trocas`: Exposes CRUD operations for the **trocas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trocas
    * const trocas = await prisma.trocas.findMany()
    * ```
    */
  get trocas(): Prisma.trocasDelegate<ExtArgs>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.17.0
   * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    avaliacoes: 'avaliacoes',
    historicotransacoes: 'historicotransacoes',
    livros: 'livros',
    mensagenschat: 'mensagenschat',
    trocas: 'trocas',
    usuarios: 'usuarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "avaliacoes" | "historicotransacoes" | "livros" | "mensagenschat" | "trocas" | "usuarios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      avaliacoes: {
        payload: Prisma.$avaliacoesPayload<ExtArgs>
        fields: Prisma.avaliacoesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.avaliacoesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.avaliacoesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>
          }
          findFirst: {
            args: Prisma.avaliacoesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.avaliacoesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>
          }
          findMany: {
            args: Prisma.avaliacoesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>[]
          }
          create: {
            args: Prisma.avaliacoesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>
          }
          createMany: {
            args: Prisma.avaliacoesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.avaliacoesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>[]
          }
          delete: {
            args: Prisma.avaliacoesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>
          }
          update: {
            args: Prisma.avaliacoesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>
          }
          deleteMany: {
            args: Prisma.avaliacoesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.avaliacoesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.avaliacoesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$avaliacoesPayload>
          }
          aggregate: {
            args: Prisma.AvaliacoesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAvaliacoes>
          }
          groupBy: {
            args: Prisma.avaliacoesGroupByArgs<ExtArgs>
            result: $Utils.Optional<AvaliacoesGroupByOutputType>[]
          }
          count: {
            args: Prisma.avaliacoesCountArgs<ExtArgs>
            result: $Utils.Optional<AvaliacoesCountAggregateOutputType> | number
          }
        }
      }
      historicotransacoes: {
        payload: Prisma.$historicotransacoesPayload<ExtArgs>
        fields: Prisma.historicotransacoesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.historicotransacoesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.historicotransacoesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>
          }
          findFirst: {
            args: Prisma.historicotransacoesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.historicotransacoesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>
          }
          findMany: {
            args: Prisma.historicotransacoesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>[]
          }
          create: {
            args: Prisma.historicotransacoesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>
          }
          createMany: {
            args: Prisma.historicotransacoesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.historicotransacoesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>[]
          }
          delete: {
            args: Prisma.historicotransacoesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>
          }
          update: {
            args: Prisma.historicotransacoesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>
          }
          deleteMany: {
            args: Prisma.historicotransacoesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.historicotransacoesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.historicotransacoesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$historicotransacoesPayload>
          }
          aggregate: {
            args: Prisma.HistoricotransacoesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistoricotransacoes>
          }
          groupBy: {
            args: Prisma.historicotransacoesGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoricotransacoesGroupByOutputType>[]
          }
          count: {
            args: Prisma.historicotransacoesCountArgs<ExtArgs>
            result: $Utils.Optional<HistoricotransacoesCountAggregateOutputType> | number
          }
        }
      }
      livros: {
        payload: Prisma.$livrosPayload<ExtArgs>
        fields: Prisma.livrosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.livrosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.livrosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>
          }
          findFirst: {
            args: Prisma.livrosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.livrosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>
          }
          findMany: {
            args: Prisma.livrosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>[]
          }
          create: {
            args: Prisma.livrosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>
          }
          createMany: {
            args: Prisma.livrosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.livrosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>[]
          }
          delete: {
            args: Prisma.livrosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>
          }
          update: {
            args: Prisma.livrosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>
          }
          deleteMany: {
            args: Prisma.livrosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.livrosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.livrosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$livrosPayload>
          }
          aggregate: {
            args: Prisma.LivrosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLivros>
          }
          groupBy: {
            args: Prisma.livrosGroupByArgs<ExtArgs>
            result: $Utils.Optional<LivrosGroupByOutputType>[]
          }
          count: {
            args: Prisma.livrosCountArgs<ExtArgs>
            result: $Utils.Optional<LivrosCountAggregateOutputType> | number
          }
        }
      }
      mensagenschat: {
        payload: Prisma.$mensagenschatPayload<ExtArgs>
        fields: Prisma.mensagenschatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mensagenschatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mensagenschatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>
          }
          findFirst: {
            args: Prisma.mensagenschatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mensagenschatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>
          }
          findMany: {
            args: Prisma.mensagenschatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>[]
          }
          create: {
            args: Prisma.mensagenschatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>
          }
          createMany: {
            args: Prisma.mensagenschatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.mensagenschatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>[]
          }
          delete: {
            args: Prisma.mensagenschatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>
          }
          update: {
            args: Prisma.mensagenschatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>
          }
          deleteMany: {
            args: Prisma.mensagenschatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.mensagenschatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.mensagenschatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mensagenschatPayload>
          }
          aggregate: {
            args: Prisma.MensagenschatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMensagenschat>
          }
          groupBy: {
            args: Prisma.mensagenschatGroupByArgs<ExtArgs>
            result: $Utils.Optional<MensagenschatGroupByOutputType>[]
          }
          count: {
            args: Prisma.mensagenschatCountArgs<ExtArgs>
            result: $Utils.Optional<MensagenschatCountAggregateOutputType> | number
          }
        }
      }
      trocas: {
        payload: Prisma.$trocasPayload<ExtArgs>
        fields: Prisma.trocasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trocasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trocasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>
          }
          findFirst: {
            args: Prisma.trocasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trocasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>
          }
          findMany: {
            args: Prisma.trocasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>[]
          }
          create: {
            args: Prisma.trocasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>
          }
          createMany: {
            args: Prisma.trocasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.trocasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>[]
          }
          delete: {
            args: Prisma.trocasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>
          }
          update: {
            args: Prisma.trocasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>
          }
          deleteMany: {
            args: Prisma.trocasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trocasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.trocasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trocasPayload>
          }
          aggregate: {
            args: Prisma.TrocasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrocas>
          }
          groupBy: {
            args: Prisma.trocasGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrocasGroupByOutputType>[]
          }
          count: {
            args: Prisma.trocasCountArgs<ExtArgs>
            result: $Utils.Optional<TrocasCountAggregateOutputType> | number
          }
        }
      }
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LivrosCountOutputType
   */

  export type LivrosCountOutputType = {
    trocas: number
  }

  export type LivrosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trocas?: boolean | LivrosCountOutputTypeCountTrocasArgs
  }

  // Custom InputTypes
  /**
   * LivrosCountOutputType without action
   */
  export type LivrosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LivrosCountOutputType
     */
    select?: LivrosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LivrosCountOutputType without action
   */
  export type LivrosCountOutputTypeCountTrocasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trocasWhereInput
  }


  /**
   * Count Type TrocasCountOutputType
   */

  export type TrocasCountOutputType = {
    historicotransacoes: number
  }

  export type TrocasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historicotransacoes?: boolean | TrocasCountOutputTypeCountHistoricotransacoesArgs
  }

  // Custom InputTypes
  /**
   * TrocasCountOutputType without action
   */
  export type TrocasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrocasCountOutputType
     */
    select?: TrocasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrocasCountOutputType without action
   */
  export type TrocasCountOutputTypeCountHistoricotransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historicotransacoesWhereInput
  }


  /**
   * Count Type UsuariosCountOutputType
   */

  export type UsuariosCountOutputType = {
    avaliacoes: number
    historicotransacoes: number
    livros: number
    mensagenschat: number
    trocas: number
  }

  export type UsuariosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avaliacoes?: boolean | UsuariosCountOutputTypeCountAvaliacoesArgs
    historicotransacoes?: boolean | UsuariosCountOutputTypeCountHistoricotransacoesArgs
    livros?: boolean | UsuariosCountOutputTypeCountLivrosArgs
    mensagenschat?: boolean | UsuariosCountOutputTypeCountMensagenschatArgs
    trocas?: boolean | UsuariosCountOutputTypeCountTrocasArgs
  }

  // Custom InputTypes
  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountAvaliacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: avaliacoesWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountHistoricotransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historicotransacoesWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountLivrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: livrosWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountMensagenschatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensagenschatWhereInput
  }

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeCountTrocasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trocasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model avaliacoes
   */

  export type AggregateAvaliacoes = {
    _count: AvaliacoesCountAggregateOutputType | null
    _avg: AvaliacoesAvgAggregateOutputType | null
    _sum: AvaliacoesSumAggregateOutputType | null
    _min: AvaliacoesMinAggregateOutputType | null
    _max: AvaliacoesMaxAggregateOutputType | null
  }

  export type AvaliacoesAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    nota: number | null
  }

  export type AvaliacoesSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    nota: number | null
  }

  export type AvaliacoesMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    nota: number | null
    comentario: string | null
  }

  export type AvaliacoesMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    nota: number | null
    comentario: string | null
  }

  export type AvaliacoesCountAggregateOutputType = {
    id: number
    usuario_id: number
    nota: number
    comentario: number
    _all: number
  }


  export type AvaliacoesAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    nota?: true
  }

  export type AvaliacoesSumAggregateInputType = {
    id?: true
    usuario_id?: true
    nota?: true
  }

  export type AvaliacoesMinAggregateInputType = {
    id?: true
    usuario_id?: true
    nota?: true
    comentario?: true
  }

  export type AvaliacoesMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    nota?: true
    comentario?: true
  }

  export type AvaliacoesCountAggregateInputType = {
    id?: true
    usuario_id?: true
    nota?: true
    comentario?: true
    _all?: true
  }

  export type AvaliacoesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which avaliacoes to aggregate.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: avaliacoesOrderByWithRelationInput | avaliacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned avaliacoes
    **/
    _count?: true | AvaliacoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvaliacoesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvaliacoesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvaliacoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvaliacoesMaxAggregateInputType
  }

  export type GetAvaliacoesAggregateType<T extends AvaliacoesAggregateArgs> = {
        [P in keyof T & keyof AggregateAvaliacoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvaliacoes[P]>
      : GetScalarType<T[P], AggregateAvaliacoes[P]>
  }




  export type avaliacoesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: avaliacoesWhereInput
    orderBy?: avaliacoesOrderByWithAggregationInput | avaliacoesOrderByWithAggregationInput[]
    by: AvaliacoesScalarFieldEnum[] | AvaliacoesScalarFieldEnum
    having?: avaliacoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvaliacoesCountAggregateInputType | true
    _avg?: AvaliacoesAvgAggregateInputType
    _sum?: AvaliacoesSumAggregateInputType
    _min?: AvaliacoesMinAggregateInputType
    _max?: AvaliacoesMaxAggregateInputType
  }

  export type AvaliacoesGroupByOutputType = {
    id: number
    usuario_id: number | null
    nota: number | null
    comentario: string | null
    _count: AvaliacoesCountAggregateOutputType | null
    _avg: AvaliacoesAvgAggregateOutputType | null
    _sum: AvaliacoesSumAggregateOutputType | null
    _min: AvaliacoesMinAggregateOutputType | null
    _max: AvaliacoesMaxAggregateOutputType | null
  }

  type GetAvaliacoesGroupByPayload<T extends avaliacoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvaliacoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvaliacoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvaliacoesGroupByOutputType[P]>
            : GetScalarType<T[P], AvaliacoesGroupByOutputType[P]>
        }
      >
    >


  export type avaliacoesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    nota?: boolean
    comentario?: boolean
    usuarios?: boolean | avaliacoes$usuariosArgs<ExtArgs>
  }, ExtArgs["result"]["avaliacoes"]>

  export type avaliacoesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    nota?: boolean
    comentario?: boolean
    usuarios?: boolean | avaliacoes$usuariosArgs<ExtArgs>
  }, ExtArgs["result"]["avaliacoes"]>

  export type avaliacoesSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    nota?: boolean
    comentario?: boolean
  }

  export type avaliacoesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | avaliacoes$usuariosArgs<ExtArgs>
  }
  export type avaliacoesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | avaliacoes$usuariosArgs<ExtArgs>
  }

  export type $avaliacoesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "avaliacoes"
    objects: {
      usuarios: Prisma.$usuariosPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number | null
      nota: number | null
      comentario: string | null
    }, ExtArgs["result"]["avaliacoes"]>
    composites: {}
  }

  type avaliacoesGetPayload<S extends boolean | null | undefined | avaliacoesDefaultArgs> = $Result.GetResult<Prisma.$avaliacoesPayload, S>

  type avaliacoesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<avaliacoesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AvaliacoesCountAggregateInputType | true
    }

  export interface avaliacoesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['avaliacoes'], meta: { name: 'avaliacoes' } }
    /**
     * Find zero or one Avaliacoes that matches the filter.
     * @param {avaliacoesFindUniqueArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends avaliacoesFindUniqueArgs>(args: SelectSubset<T, avaliacoesFindUniqueArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Avaliacoes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {avaliacoesFindUniqueOrThrowArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends avaliacoesFindUniqueOrThrowArgs>(args: SelectSubset<T, avaliacoesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Avaliacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesFindFirstArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends avaliacoesFindFirstArgs>(args?: SelectSubset<T, avaliacoesFindFirstArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Avaliacoes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesFindFirstOrThrowArgs} args - Arguments to find a Avaliacoes
     * @example
     * // Get one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends avaliacoesFindFirstOrThrowArgs>(args?: SelectSubset<T, avaliacoesFindFirstOrThrowArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Avaliacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findMany()
     * 
     * // Get first 10 Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avaliacoesWithIdOnly = await prisma.avaliacoes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends avaliacoesFindManyArgs>(args?: SelectSubset<T, avaliacoesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Avaliacoes.
     * @param {avaliacoesCreateArgs} args - Arguments to create a Avaliacoes.
     * @example
     * // Create one Avaliacoes
     * const Avaliacoes = await prisma.avaliacoes.create({
     *   data: {
     *     // ... data to create a Avaliacoes
     *   }
     * })
     * 
     */
    create<T extends avaliacoesCreateArgs>(args: SelectSubset<T, avaliacoesCreateArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Avaliacoes.
     * @param {avaliacoesCreateManyArgs} args - Arguments to create many Avaliacoes.
     * @example
     * // Create many Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends avaliacoesCreateManyArgs>(args?: SelectSubset<T, avaliacoesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Avaliacoes and returns the data saved in the database.
     * @param {avaliacoesCreateManyAndReturnArgs} args - Arguments to create many Avaliacoes.
     * @example
     * // Create many Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Avaliacoes and only return the `id`
     * const avaliacoesWithIdOnly = await prisma.avaliacoes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends avaliacoesCreateManyAndReturnArgs>(args?: SelectSubset<T, avaliacoesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Avaliacoes.
     * @param {avaliacoesDeleteArgs} args - Arguments to delete one Avaliacoes.
     * @example
     * // Delete one Avaliacoes
     * const Avaliacoes = await prisma.avaliacoes.delete({
     *   where: {
     *     // ... filter to delete one Avaliacoes
     *   }
     * })
     * 
     */
    delete<T extends avaliacoesDeleteArgs>(args: SelectSubset<T, avaliacoesDeleteArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Avaliacoes.
     * @param {avaliacoesUpdateArgs} args - Arguments to update one Avaliacoes.
     * @example
     * // Update one Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends avaliacoesUpdateArgs>(args: SelectSubset<T, avaliacoesUpdateArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Avaliacoes.
     * @param {avaliacoesDeleteManyArgs} args - Arguments to filter Avaliacoes to delete.
     * @example
     * // Delete a few Avaliacoes
     * const { count } = await prisma.avaliacoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends avaliacoesDeleteManyArgs>(args?: SelectSubset<T, avaliacoesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends avaliacoesUpdateManyArgs>(args: SelectSubset<T, avaliacoesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Avaliacoes.
     * @param {avaliacoesUpsertArgs} args - Arguments to update or create a Avaliacoes.
     * @example
     * // Update or create a Avaliacoes
     * const avaliacoes = await prisma.avaliacoes.upsert({
     *   create: {
     *     // ... data to create a Avaliacoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avaliacoes we want to update
     *   }
     * })
     */
    upsert<T extends avaliacoesUpsertArgs>(args: SelectSubset<T, avaliacoesUpsertArgs<ExtArgs>>): Prisma__avaliacoesClient<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesCountArgs} args - Arguments to filter Avaliacoes to count.
     * @example
     * // Count the number of Avaliacoes
     * const count = await prisma.avaliacoes.count({
     *   where: {
     *     // ... the filter for the Avaliacoes we want to count
     *   }
     * })
    **/
    count<T extends avaliacoesCountArgs>(
      args?: Subset<T, avaliacoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvaliacoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvaliacoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvaliacoesAggregateArgs>(args: Subset<T, AvaliacoesAggregateArgs>): Prisma.PrismaPromise<GetAvaliacoesAggregateType<T>>

    /**
     * Group by Avaliacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {avaliacoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends avaliacoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: avaliacoesGroupByArgs['orderBy'] }
        : { orderBy?: avaliacoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, avaliacoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvaliacoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the avaliacoes model
   */
  readonly fields: avaliacoesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for avaliacoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__avaliacoesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarios<T extends avaliacoes$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, avaliacoes$usuariosArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the avaliacoes model
   */ 
  interface avaliacoesFieldRefs {
    readonly id: FieldRef<"avaliacoes", 'Int'>
    readonly usuario_id: FieldRef<"avaliacoes", 'Int'>
    readonly nota: FieldRef<"avaliacoes", 'Int'>
    readonly comentario: FieldRef<"avaliacoes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * avaliacoes findUnique
   */
  export type avaliacoesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where: avaliacoesWhereUniqueInput
  }

  /**
   * avaliacoes findUniqueOrThrow
   */
  export type avaliacoesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where: avaliacoesWhereUniqueInput
  }

  /**
   * avaliacoes findFirst
   */
  export type avaliacoesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: avaliacoesOrderByWithRelationInput | avaliacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avaliacoes.
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avaliacoes.
     */
    distinct?: AvaliacoesScalarFieldEnum | AvaliacoesScalarFieldEnum[]
  }

  /**
   * avaliacoes findFirstOrThrow
   */
  export type avaliacoesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: avaliacoesOrderByWithRelationInput | avaliacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for avaliacoes.
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of avaliacoes.
     */
    distinct?: AvaliacoesScalarFieldEnum | AvaliacoesScalarFieldEnum[]
  }

  /**
   * avaliacoes findMany
   */
  export type avaliacoesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * Filter, which avaliacoes to fetch.
     */
    where?: avaliacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of avaliacoes to fetch.
     */
    orderBy?: avaliacoesOrderByWithRelationInput | avaliacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing avaliacoes.
     */
    cursor?: avaliacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` avaliacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` avaliacoes.
     */
    skip?: number
    distinct?: AvaliacoesScalarFieldEnum | AvaliacoesScalarFieldEnum[]
  }

  /**
   * avaliacoes create
   */
  export type avaliacoesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * The data needed to create a avaliacoes.
     */
    data?: XOR<avaliacoesCreateInput, avaliacoesUncheckedCreateInput>
  }

  /**
   * avaliacoes createMany
   */
  export type avaliacoesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many avaliacoes.
     */
    data: avaliacoesCreateManyInput | avaliacoesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * avaliacoes createManyAndReturn
   */
  export type avaliacoesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many avaliacoes.
     */
    data: avaliacoesCreateManyInput | avaliacoesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * avaliacoes update
   */
  export type avaliacoesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * The data needed to update a avaliacoes.
     */
    data: XOR<avaliacoesUpdateInput, avaliacoesUncheckedUpdateInput>
    /**
     * Choose, which avaliacoes to update.
     */
    where: avaliacoesWhereUniqueInput
  }

  /**
   * avaliacoes updateMany
   */
  export type avaliacoesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update avaliacoes.
     */
    data: XOR<avaliacoesUpdateManyMutationInput, avaliacoesUncheckedUpdateManyInput>
    /**
     * Filter which avaliacoes to update
     */
    where?: avaliacoesWhereInput
  }

  /**
   * avaliacoes upsert
   */
  export type avaliacoesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * The filter to search for the avaliacoes to update in case it exists.
     */
    where: avaliacoesWhereUniqueInput
    /**
     * In case the avaliacoes found by the `where` argument doesn't exist, create a new avaliacoes with this data.
     */
    create: XOR<avaliacoesCreateInput, avaliacoesUncheckedCreateInput>
    /**
     * In case the avaliacoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<avaliacoesUpdateInput, avaliacoesUncheckedUpdateInput>
  }

  /**
   * avaliacoes delete
   */
  export type avaliacoesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    /**
     * Filter which avaliacoes to delete.
     */
    where: avaliacoesWhereUniqueInput
  }

  /**
   * avaliacoes deleteMany
   */
  export type avaliacoesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which avaliacoes to delete
     */
    where?: avaliacoesWhereInput
  }

  /**
   * avaliacoes.usuarios
   */
  export type avaliacoes$usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    where?: usuariosWhereInput
  }

  /**
   * avaliacoes without action
   */
  export type avaliacoesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
  }


  /**
   * Model historicotransacoes
   */

  export type AggregateHistoricotransacoes = {
    _count: HistoricotransacoesCountAggregateOutputType | null
    _avg: HistoricotransacoesAvgAggregateOutputType | null
    _sum: HistoricotransacoesSumAggregateOutputType | null
    _min: HistoricotransacoesMinAggregateOutputType | null
    _max: HistoricotransacoesMaxAggregateOutputType | null
  }

  export type HistoricotransacoesAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    troca_id: number | null
  }

  export type HistoricotransacoesSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    troca_id: number | null
  }

  export type HistoricotransacoesMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    troca_id: number | null
  }

  export type HistoricotransacoesMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    troca_id: number | null
  }

  export type HistoricotransacoesCountAggregateOutputType = {
    id: number
    usuario_id: number
    troca_id: number
    _all: number
  }


  export type HistoricotransacoesAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    troca_id?: true
  }

  export type HistoricotransacoesSumAggregateInputType = {
    id?: true
    usuario_id?: true
    troca_id?: true
  }

  export type HistoricotransacoesMinAggregateInputType = {
    id?: true
    usuario_id?: true
    troca_id?: true
  }

  export type HistoricotransacoesMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    troca_id?: true
  }

  export type HistoricotransacoesCountAggregateInputType = {
    id?: true
    usuario_id?: true
    troca_id?: true
    _all?: true
  }

  export type HistoricotransacoesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historicotransacoes to aggregate.
     */
    where?: historicotransacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicotransacoes to fetch.
     */
    orderBy?: historicotransacoesOrderByWithRelationInput | historicotransacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: historicotransacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicotransacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicotransacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned historicotransacoes
    **/
    _count?: true | HistoricotransacoesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoricotransacoesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoricotransacoesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoricotransacoesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoricotransacoesMaxAggregateInputType
  }

  export type GetHistoricotransacoesAggregateType<T extends HistoricotransacoesAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoricotransacoes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoricotransacoes[P]>
      : GetScalarType<T[P], AggregateHistoricotransacoes[P]>
  }




  export type historicotransacoesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: historicotransacoesWhereInput
    orderBy?: historicotransacoesOrderByWithAggregationInput | historicotransacoesOrderByWithAggregationInput[]
    by: HistoricotransacoesScalarFieldEnum[] | HistoricotransacoesScalarFieldEnum
    having?: historicotransacoesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoricotransacoesCountAggregateInputType | true
    _avg?: HistoricotransacoesAvgAggregateInputType
    _sum?: HistoricotransacoesSumAggregateInputType
    _min?: HistoricotransacoesMinAggregateInputType
    _max?: HistoricotransacoesMaxAggregateInputType
  }

  export type HistoricotransacoesGroupByOutputType = {
    id: number
    usuario_id: number
    troca_id: number
    _count: HistoricotransacoesCountAggregateOutputType | null
    _avg: HistoricotransacoesAvgAggregateOutputType | null
    _sum: HistoricotransacoesSumAggregateOutputType | null
    _min: HistoricotransacoesMinAggregateOutputType | null
    _max: HistoricotransacoesMaxAggregateOutputType | null
  }

  type GetHistoricotransacoesGroupByPayload<T extends historicotransacoesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoricotransacoesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoricotransacoesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoricotransacoesGroupByOutputType[P]>
            : GetScalarType<T[P], HistoricotransacoesGroupByOutputType[P]>
        }
      >
    >


  export type historicotransacoesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    troca_id?: boolean
    trocas?: boolean | trocasDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicotransacoes"]>

  export type historicotransacoesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    troca_id?: boolean
    trocas?: boolean | trocasDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicotransacoes"]>

  export type historicotransacoesSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    troca_id?: boolean
  }

  export type historicotransacoesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trocas?: boolean | trocasDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }
  export type historicotransacoesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trocas?: boolean | trocasDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $historicotransacoesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "historicotransacoes"
    objects: {
      trocas: Prisma.$trocasPayload<ExtArgs>
      usuarios: Prisma.$usuariosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      troca_id: number
    }, ExtArgs["result"]["historicotransacoes"]>
    composites: {}
  }

  type historicotransacoesGetPayload<S extends boolean | null | undefined | historicotransacoesDefaultArgs> = $Result.GetResult<Prisma.$historicotransacoesPayload, S>

  type historicotransacoesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<historicotransacoesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HistoricotransacoesCountAggregateInputType | true
    }

  export interface historicotransacoesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['historicotransacoes'], meta: { name: 'historicotransacoes' } }
    /**
     * Find zero or one Historicotransacoes that matches the filter.
     * @param {historicotransacoesFindUniqueArgs} args - Arguments to find a Historicotransacoes
     * @example
     * // Get one Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends historicotransacoesFindUniqueArgs>(args: SelectSubset<T, historicotransacoesFindUniqueArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Historicotransacoes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {historicotransacoesFindUniqueOrThrowArgs} args - Arguments to find a Historicotransacoes
     * @example
     * // Get one Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends historicotransacoesFindUniqueOrThrowArgs>(args: SelectSubset<T, historicotransacoesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Historicotransacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicotransacoesFindFirstArgs} args - Arguments to find a Historicotransacoes
     * @example
     * // Get one Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends historicotransacoesFindFirstArgs>(args?: SelectSubset<T, historicotransacoesFindFirstArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Historicotransacoes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicotransacoesFindFirstOrThrowArgs} args - Arguments to find a Historicotransacoes
     * @example
     * // Get one Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends historicotransacoesFindFirstOrThrowArgs>(args?: SelectSubset<T, historicotransacoesFindFirstOrThrowArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Historicotransacoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicotransacoesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.findMany()
     * 
     * // Get first 10 Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historicotransacoesWithIdOnly = await prisma.historicotransacoes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends historicotransacoesFindManyArgs>(args?: SelectSubset<T, historicotransacoesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Historicotransacoes.
     * @param {historicotransacoesCreateArgs} args - Arguments to create a Historicotransacoes.
     * @example
     * // Create one Historicotransacoes
     * const Historicotransacoes = await prisma.historicotransacoes.create({
     *   data: {
     *     // ... data to create a Historicotransacoes
     *   }
     * })
     * 
     */
    create<T extends historicotransacoesCreateArgs>(args: SelectSubset<T, historicotransacoesCreateArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Historicotransacoes.
     * @param {historicotransacoesCreateManyArgs} args - Arguments to create many Historicotransacoes.
     * @example
     * // Create many Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends historicotransacoesCreateManyArgs>(args?: SelectSubset<T, historicotransacoesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Historicotransacoes and returns the data saved in the database.
     * @param {historicotransacoesCreateManyAndReturnArgs} args - Arguments to create many Historicotransacoes.
     * @example
     * // Create many Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Historicotransacoes and only return the `id`
     * const historicotransacoesWithIdOnly = await prisma.historicotransacoes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends historicotransacoesCreateManyAndReturnArgs>(args?: SelectSubset<T, historicotransacoesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Historicotransacoes.
     * @param {historicotransacoesDeleteArgs} args - Arguments to delete one Historicotransacoes.
     * @example
     * // Delete one Historicotransacoes
     * const Historicotransacoes = await prisma.historicotransacoes.delete({
     *   where: {
     *     // ... filter to delete one Historicotransacoes
     *   }
     * })
     * 
     */
    delete<T extends historicotransacoesDeleteArgs>(args: SelectSubset<T, historicotransacoesDeleteArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Historicotransacoes.
     * @param {historicotransacoesUpdateArgs} args - Arguments to update one Historicotransacoes.
     * @example
     * // Update one Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends historicotransacoesUpdateArgs>(args: SelectSubset<T, historicotransacoesUpdateArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Historicotransacoes.
     * @param {historicotransacoesDeleteManyArgs} args - Arguments to filter Historicotransacoes to delete.
     * @example
     * // Delete a few Historicotransacoes
     * const { count } = await prisma.historicotransacoes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends historicotransacoesDeleteManyArgs>(args?: SelectSubset<T, historicotransacoesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historicotransacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicotransacoesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends historicotransacoesUpdateManyArgs>(args: SelectSubset<T, historicotransacoesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historicotransacoes.
     * @param {historicotransacoesUpsertArgs} args - Arguments to update or create a Historicotransacoes.
     * @example
     * // Update or create a Historicotransacoes
     * const historicotransacoes = await prisma.historicotransacoes.upsert({
     *   create: {
     *     // ... data to create a Historicotransacoes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historicotransacoes we want to update
     *   }
     * })
     */
    upsert<T extends historicotransacoesUpsertArgs>(args: SelectSubset<T, historicotransacoesUpsertArgs<ExtArgs>>): Prisma__historicotransacoesClient<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Historicotransacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicotransacoesCountArgs} args - Arguments to filter Historicotransacoes to count.
     * @example
     * // Count the number of Historicotransacoes
     * const count = await prisma.historicotransacoes.count({
     *   where: {
     *     // ... the filter for the Historicotransacoes we want to count
     *   }
     * })
    **/
    count<T extends historicotransacoesCountArgs>(
      args?: Subset<T, historicotransacoesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoricotransacoesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historicotransacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricotransacoesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoricotransacoesAggregateArgs>(args: Subset<T, HistoricotransacoesAggregateArgs>): Prisma.PrismaPromise<GetHistoricotransacoesAggregateType<T>>

    /**
     * Group by Historicotransacoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {historicotransacoesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends historicotransacoesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: historicotransacoesGroupByArgs['orderBy'] }
        : { orderBy?: historicotransacoesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, historicotransacoesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoricotransacoesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the historicotransacoes model
   */
  readonly fields: historicotransacoesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for historicotransacoes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__historicotransacoesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trocas<T extends trocasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, trocasDefaultArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usuarios<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the historicotransacoes model
   */ 
  interface historicotransacoesFieldRefs {
    readonly id: FieldRef<"historicotransacoes", 'Int'>
    readonly usuario_id: FieldRef<"historicotransacoes", 'Int'>
    readonly troca_id: FieldRef<"historicotransacoes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * historicotransacoes findUnique
   */
  export type historicotransacoesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * Filter, which historicotransacoes to fetch.
     */
    where: historicotransacoesWhereUniqueInput
  }

  /**
   * historicotransacoes findUniqueOrThrow
   */
  export type historicotransacoesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * Filter, which historicotransacoes to fetch.
     */
    where: historicotransacoesWhereUniqueInput
  }

  /**
   * historicotransacoes findFirst
   */
  export type historicotransacoesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * Filter, which historicotransacoes to fetch.
     */
    where?: historicotransacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicotransacoes to fetch.
     */
    orderBy?: historicotransacoesOrderByWithRelationInput | historicotransacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historicotransacoes.
     */
    cursor?: historicotransacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicotransacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicotransacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historicotransacoes.
     */
    distinct?: HistoricotransacoesScalarFieldEnum | HistoricotransacoesScalarFieldEnum[]
  }

  /**
   * historicotransacoes findFirstOrThrow
   */
  export type historicotransacoesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * Filter, which historicotransacoes to fetch.
     */
    where?: historicotransacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicotransacoes to fetch.
     */
    orderBy?: historicotransacoesOrderByWithRelationInput | historicotransacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for historicotransacoes.
     */
    cursor?: historicotransacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicotransacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicotransacoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of historicotransacoes.
     */
    distinct?: HistoricotransacoesScalarFieldEnum | HistoricotransacoesScalarFieldEnum[]
  }

  /**
   * historicotransacoes findMany
   */
  export type historicotransacoesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * Filter, which historicotransacoes to fetch.
     */
    where?: historicotransacoesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of historicotransacoes to fetch.
     */
    orderBy?: historicotransacoesOrderByWithRelationInput | historicotransacoesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing historicotransacoes.
     */
    cursor?: historicotransacoesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` historicotransacoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` historicotransacoes.
     */
    skip?: number
    distinct?: HistoricotransacoesScalarFieldEnum | HistoricotransacoesScalarFieldEnum[]
  }

  /**
   * historicotransacoes create
   */
  export type historicotransacoesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * The data needed to create a historicotransacoes.
     */
    data: XOR<historicotransacoesCreateInput, historicotransacoesUncheckedCreateInput>
  }

  /**
   * historicotransacoes createMany
   */
  export type historicotransacoesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many historicotransacoes.
     */
    data: historicotransacoesCreateManyInput | historicotransacoesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * historicotransacoes createManyAndReturn
   */
  export type historicotransacoesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many historicotransacoes.
     */
    data: historicotransacoesCreateManyInput | historicotransacoesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * historicotransacoes update
   */
  export type historicotransacoesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * The data needed to update a historicotransacoes.
     */
    data: XOR<historicotransacoesUpdateInput, historicotransacoesUncheckedUpdateInput>
    /**
     * Choose, which historicotransacoes to update.
     */
    where: historicotransacoesWhereUniqueInput
  }

  /**
   * historicotransacoes updateMany
   */
  export type historicotransacoesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update historicotransacoes.
     */
    data: XOR<historicotransacoesUpdateManyMutationInput, historicotransacoesUncheckedUpdateManyInput>
    /**
     * Filter which historicotransacoes to update
     */
    where?: historicotransacoesWhereInput
  }

  /**
   * historicotransacoes upsert
   */
  export type historicotransacoesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * The filter to search for the historicotransacoes to update in case it exists.
     */
    where: historicotransacoesWhereUniqueInput
    /**
     * In case the historicotransacoes found by the `where` argument doesn't exist, create a new historicotransacoes with this data.
     */
    create: XOR<historicotransacoesCreateInput, historicotransacoesUncheckedCreateInput>
    /**
     * In case the historicotransacoes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<historicotransacoesUpdateInput, historicotransacoesUncheckedUpdateInput>
  }

  /**
   * historicotransacoes delete
   */
  export type historicotransacoesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    /**
     * Filter which historicotransacoes to delete.
     */
    where: historicotransacoesWhereUniqueInput
  }

  /**
   * historicotransacoes deleteMany
   */
  export type historicotransacoesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which historicotransacoes to delete
     */
    where?: historicotransacoesWhereInput
  }

  /**
   * historicotransacoes without action
   */
  export type historicotransacoesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
  }


  /**
   * Model livros
   */

  export type AggregateLivros = {
    _count: LivrosCountAggregateOutputType | null
    _avg: LivrosAvgAggregateOutputType | null
    _sum: LivrosSumAggregateOutputType | null
    _min: LivrosMinAggregateOutputType | null
    _max: LivrosMaxAggregateOutputType | null
  }

  export type LivrosAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    ano_publicacao: number | null
  }

  export type LivrosSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    ano_publicacao: number | null
  }

  export type LivrosMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    titulo: string | null
    autor: string | null
    genero: string | null
    ano_publicacao: number | null
  }

  export type LivrosMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    titulo: string | null
    autor: string | null
    genero: string | null
    ano_publicacao: number | null
  }

  export type LivrosCountAggregateOutputType = {
    id: number
    usuario_id: number
    titulo: number
    autor: number
    genero: number
    ano_publicacao: number
    _all: number
  }


  export type LivrosAvgAggregateInputType = {
    id?: true
    usuario_id?: true
    ano_publicacao?: true
  }

  export type LivrosSumAggregateInputType = {
    id?: true
    usuario_id?: true
    ano_publicacao?: true
  }

  export type LivrosMinAggregateInputType = {
    id?: true
    usuario_id?: true
    titulo?: true
    autor?: true
    genero?: true
    ano_publicacao?: true
  }

  export type LivrosMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    titulo?: true
    autor?: true
    genero?: true
    ano_publicacao?: true
  }

  export type LivrosCountAggregateInputType = {
    id?: true
    usuario_id?: true
    titulo?: true
    autor?: true
    genero?: true
    ano_publicacao?: true
    _all?: true
  }

  export type LivrosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which livros to aggregate.
     */
    where?: livrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of livros to fetch.
     */
    orderBy?: livrosOrderByWithRelationInput | livrosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: livrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` livros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` livros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned livros
    **/
    _count?: true | LivrosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LivrosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LivrosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LivrosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LivrosMaxAggregateInputType
  }

  export type GetLivrosAggregateType<T extends LivrosAggregateArgs> = {
        [P in keyof T & keyof AggregateLivros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLivros[P]>
      : GetScalarType<T[P], AggregateLivros[P]>
  }




  export type livrosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: livrosWhereInput
    orderBy?: livrosOrderByWithAggregationInput | livrosOrderByWithAggregationInput[]
    by: LivrosScalarFieldEnum[] | LivrosScalarFieldEnum
    having?: livrosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LivrosCountAggregateInputType | true
    _avg?: LivrosAvgAggregateInputType
    _sum?: LivrosSumAggregateInputType
    _min?: LivrosMinAggregateInputType
    _max?: LivrosMaxAggregateInputType
  }

  export type LivrosGroupByOutputType = {
    id: number
    usuario_id: number
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
    _count: LivrosCountAggregateOutputType | null
    _avg: LivrosAvgAggregateOutputType | null
    _sum: LivrosSumAggregateOutputType | null
    _min: LivrosMinAggregateOutputType | null
    _max: LivrosMaxAggregateOutputType | null
  }

  type GetLivrosGroupByPayload<T extends livrosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LivrosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LivrosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LivrosGroupByOutputType[P]>
            : GetScalarType<T[P], LivrosGroupByOutputType[P]>
        }
      >
    >


  export type livrosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    titulo?: boolean
    autor?: boolean
    genero?: boolean
    ano_publicacao?: boolean
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
    trocas?: boolean | livros$trocasArgs<ExtArgs>
    _count?: boolean | LivrosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["livros"]>

  export type livrosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    titulo?: boolean
    autor?: boolean
    genero?: boolean
    ano_publicacao?: boolean
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["livros"]>

  export type livrosSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    titulo?: boolean
    autor?: boolean
    genero?: boolean
    ano_publicacao?: boolean
  }

  export type livrosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
    trocas?: boolean | livros$trocasArgs<ExtArgs>
    _count?: boolean | LivrosCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type livrosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $livrosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "livros"
    objects: {
      usuarios: Prisma.$usuariosPayload<ExtArgs>
      trocas: Prisma.$trocasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      titulo: string
      autor: string
      genero: string
      ano_publicacao: number
    }, ExtArgs["result"]["livros"]>
    composites: {}
  }

  type livrosGetPayload<S extends boolean | null | undefined | livrosDefaultArgs> = $Result.GetResult<Prisma.$livrosPayload, S>

  type livrosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<livrosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LivrosCountAggregateInputType | true
    }

  export interface livrosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['livros'], meta: { name: 'livros' } }
    /**
     * Find zero or one Livros that matches the filter.
     * @param {livrosFindUniqueArgs} args - Arguments to find a Livros
     * @example
     * // Get one Livros
     * const livros = await prisma.livros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends livrosFindUniqueArgs>(args: SelectSubset<T, livrosFindUniqueArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Livros that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {livrosFindUniqueOrThrowArgs} args - Arguments to find a Livros
     * @example
     * // Get one Livros
     * const livros = await prisma.livros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends livrosFindUniqueOrThrowArgs>(args: SelectSubset<T, livrosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Livros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {livrosFindFirstArgs} args - Arguments to find a Livros
     * @example
     * // Get one Livros
     * const livros = await prisma.livros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends livrosFindFirstArgs>(args?: SelectSubset<T, livrosFindFirstArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Livros that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {livrosFindFirstOrThrowArgs} args - Arguments to find a Livros
     * @example
     * // Get one Livros
     * const livros = await prisma.livros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends livrosFindFirstOrThrowArgs>(args?: SelectSubset<T, livrosFindFirstOrThrowArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Livros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {livrosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Livros
     * const livros = await prisma.livros.findMany()
     * 
     * // Get first 10 Livros
     * const livros = await prisma.livros.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const livrosWithIdOnly = await prisma.livros.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends livrosFindManyArgs>(args?: SelectSubset<T, livrosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Livros.
     * @param {livrosCreateArgs} args - Arguments to create a Livros.
     * @example
     * // Create one Livros
     * const Livros = await prisma.livros.create({
     *   data: {
     *     // ... data to create a Livros
     *   }
     * })
     * 
     */
    create<T extends livrosCreateArgs>(args: SelectSubset<T, livrosCreateArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Livros.
     * @param {livrosCreateManyArgs} args - Arguments to create many Livros.
     * @example
     * // Create many Livros
     * const livros = await prisma.livros.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends livrosCreateManyArgs>(args?: SelectSubset<T, livrosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Livros and returns the data saved in the database.
     * @param {livrosCreateManyAndReturnArgs} args - Arguments to create many Livros.
     * @example
     * // Create many Livros
     * const livros = await prisma.livros.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Livros and only return the `id`
     * const livrosWithIdOnly = await prisma.livros.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends livrosCreateManyAndReturnArgs>(args?: SelectSubset<T, livrosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Livros.
     * @param {livrosDeleteArgs} args - Arguments to delete one Livros.
     * @example
     * // Delete one Livros
     * const Livros = await prisma.livros.delete({
     *   where: {
     *     // ... filter to delete one Livros
     *   }
     * })
     * 
     */
    delete<T extends livrosDeleteArgs>(args: SelectSubset<T, livrosDeleteArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Livros.
     * @param {livrosUpdateArgs} args - Arguments to update one Livros.
     * @example
     * // Update one Livros
     * const livros = await prisma.livros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends livrosUpdateArgs>(args: SelectSubset<T, livrosUpdateArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Livros.
     * @param {livrosDeleteManyArgs} args - Arguments to filter Livros to delete.
     * @example
     * // Delete a few Livros
     * const { count } = await prisma.livros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends livrosDeleteManyArgs>(args?: SelectSubset<T, livrosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Livros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {livrosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Livros
     * const livros = await prisma.livros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends livrosUpdateManyArgs>(args: SelectSubset<T, livrosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Livros.
     * @param {livrosUpsertArgs} args - Arguments to update or create a Livros.
     * @example
     * // Update or create a Livros
     * const livros = await prisma.livros.upsert({
     *   create: {
     *     // ... data to create a Livros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Livros we want to update
     *   }
     * })
     */
    upsert<T extends livrosUpsertArgs>(args: SelectSubset<T, livrosUpsertArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Livros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {livrosCountArgs} args - Arguments to filter Livros to count.
     * @example
     * // Count the number of Livros
     * const count = await prisma.livros.count({
     *   where: {
     *     // ... the filter for the Livros we want to count
     *   }
     * })
    **/
    count<T extends livrosCountArgs>(
      args?: Subset<T, livrosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LivrosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Livros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LivrosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LivrosAggregateArgs>(args: Subset<T, LivrosAggregateArgs>): Prisma.PrismaPromise<GetLivrosAggregateType<T>>

    /**
     * Group by Livros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {livrosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends livrosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: livrosGroupByArgs['orderBy'] }
        : { orderBy?: livrosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, livrosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLivrosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the livros model
   */
  readonly fields: livrosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for livros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__livrosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarios<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    trocas<T extends livros$trocasArgs<ExtArgs> = {}>(args?: Subset<T, livros$trocasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the livros model
   */ 
  interface livrosFieldRefs {
    readonly id: FieldRef<"livros", 'Int'>
    readonly usuario_id: FieldRef<"livros", 'Int'>
    readonly titulo: FieldRef<"livros", 'String'>
    readonly autor: FieldRef<"livros", 'String'>
    readonly genero: FieldRef<"livros", 'String'>
    readonly ano_publicacao: FieldRef<"livros", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * livros findUnique
   */
  export type livrosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * Filter, which livros to fetch.
     */
    where: livrosWhereUniqueInput
  }

  /**
   * livros findUniqueOrThrow
   */
  export type livrosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * Filter, which livros to fetch.
     */
    where: livrosWhereUniqueInput
  }

  /**
   * livros findFirst
   */
  export type livrosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * Filter, which livros to fetch.
     */
    where?: livrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of livros to fetch.
     */
    orderBy?: livrosOrderByWithRelationInput | livrosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for livros.
     */
    cursor?: livrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` livros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` livros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of livros.
     */
    distinct?: LivrosScalarFieldEnum | LivrosScalarFieldEnum[]
  }

  /**
   * livros findFirstOrThrow
   */
  export type livrosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * Filter, which livros to fetch.
     */
    where?: livrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of livros to fetch.
     */
    orderBy?: livrosOrderByWithRelationInput | livrosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for livros.
     */
    cursor?: livrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` livros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` livros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of livros.
     */
    distinct?: LivrosScalarFieldEnum | LivrosScalarFieldEnum[]
  }

  /**
   * livros findMany
   */
  export type livrosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * Filter, which livros to fetch.
     */
    where?: livrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of livros to fetch.
     */
    orderBy?: livrosOrderByWithRelationInput | livrosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing livros.
     */
    cursor?: livrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` livros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` livros.
     */
    skip?: number
    distinct?: LivrosScalarFieldEnum | LivrosScalarFieldEnum[]
  }

  /**
   * livros create
   */
  export type livrosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * The data needed to create a livros.
     */
    data: XOR<livrosCreateInput, livrosUncheckedCreateInput>
  }

  /**
   * livros createMany
   */
  export type livrosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many livros.
     */
    data: livrosCreateManyInput | livrosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * livros createManyAndReturn
   */
  export type livrosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many livros.
     */
    data: livrosCreateManyInput | livrosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * livros update
   */
  export type livrosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * The data needed to update a livros.
     */
    data: XOR<livrosUpdateInput, livrosUncheckedUpdateInput>
    /**
     * Choose, which livros to update.
     */
    where: livrosWhereUniqueInput
  }

  /**
   * livros updateMany
   */
  export type livrosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update livros.
     */
    data: XOR<livrosUpdateManyMutationInput, livrosUncheckedUpdateManyInput>
    /**
     * Filter which livros to update
     */
    where?: livrosWhereInput
  }

  /**
   * livros upsert
   */
  export type livrosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * The filter to search for the livros to update in case it exists.
     */
    where: livrosWhereUniqueInput
    /**
     * In case the livros found by the `where` argument doesn't exist, create a new livros with this data.
     */
    create: XOR<livrosCreateInput, livrosUncheckedCreateInput>
    /**
     * In case the livros was found with the provided `where` argument, update it with this data.
     */
    update: XOR<livrosUpdateInput, livrosUncheckedUpdateInput>
  }

  /**
   * livros delete
   */
  export type livrosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    /**
     * Filter which livros to delete.
     */
    where: livrosWhereUniqueInput
  }

  /**
   * livros deleteMany
   */
  export type livrosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which livros to delete
     */
    where?: livrosWhereInput
  }

  /**
   * livros.trocas
   */
  export type livros$trocasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    where?: trocasWhereInput
    orderBy?: trocasOrderByWithRelationInput | trocasOrderByWithRelationInput[]
    cursor?: trocasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrocasScalarFieldEnum | TrocasScalarFieldEnum[]
  }

  /**
   * livros without action
   */
  export type livrosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
  }


  /**
   * Model mensagenschat
   */

  export type AggregateMensagenschat = {
    _count: MensagenschatCountAggregateOutputType | null
    _avg: MensagenschatAvgAggregateOutputType | null
    _sum: MensagenschatSumAggregateOutputType | null
    _min: MensagenschatMinAggregateOutputType | null
    _max: MensagenschatMaxAggregateOutputType | null
  }

  export type MensagenschatAvgAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type MensagenschatSumAggregateOutputType = {
    id: number | null
    usuario_id: number | null
  }

  export type MensagenschatMinAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    mensagem: string | null
  }

  export type MensagenschatMaxAggregateOutputType = {
    id: number | null
    usuario_id: number | null
    mensagem: string | null
  }

  export type MensagenschatCountAggregateOutputType = {
    id: number
    usuario_id: number
    mensagem: number
    _all: number
  }


  export type MensagenschatAvgAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type MensagenschatSumAggregateInputType = {
    id?: true
    usuario_id?: true
  }

  export type MensagenschatMinAggregateInputType = {
    id?: true
    usuario_id?: true
    mensagem?: true
  }

  export type MensagenschatMaxAggregateInputType = {
    id?: true
    usuario_id?: true
    mensagem?: true
  }

  export type MensagenschatCountAggregateInputType = {
    id?: true
    usuario_id?: true
    mensagem?: true
    _all?: true
  }

  export type MensagenschatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mensagenschat to aggregate.
     */
    where?: mensagenschatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensagenschats to fetch.
     */
    orderBy?: mensagenschatOrderByWithRelationInput | mensagenschatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mensagenschatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensagenschats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensagenschats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mensagenschats
    **/
    _count?: true | MensagenschatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensagenschatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensagenschatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensagenschatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensagenschatMaxAggregateInputType
  }

  export type GetMensagenschatAggregateType<T extends MensagenschatAggregateArgs> = {
        [P in keyof T & keyof AggregateMensagenschat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensagenschat[P]>
      : GetScalarType<T[P], AggregateMensagenschat[P]>
  }




  export type mensagenschatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mensagenschatWhereInput
    orderBy?: mensagenschatOrderByWithAggregationInput | mensagenschatOrderByWithAggregationInput[]
    by: MensagenschatScalarFieldEnum[] | MensagenschatScalarFieldEnum
    having?: mensagenschatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensagenschatCountAggregateInputType | true
    _avg?: MensagenschatAvgAggregateInputType
    _sum?: MensagenschatSumAggregateInputType
    _min?: MensagenschatMinAggregateInputType
    _max?: MensagenschatMaxAggregateInputType
  }

  export type MensagenschatGroupByOutputType = {
    id: number
    usuario_id: number
    mensagem: string
    _count: MensagenschatCountAggregateOutputType | null
    _avg: MensagenschatAvgAggregateOutputType | null
    _sum: MensagenschatSumAggregateOutputType | null
    _min: MensagenschatMinAggregateOutputType | null
    _max: MensagenschatMaxAggregateOutputType | null
  }

  type GetMensagenschatGroupByPayload<T extends mensagenschatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensagenschatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensagenschatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensagenschatGroupByOutputType[P]>
            : GetScalarType<T[P], MensagenschatGroupByOutputType[P]>
        }
      >
    >


  export type mensagenschatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    mensagem?: boolean
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensagenschat"]>

  export type mensagenschatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario_id?: boolean
    mensagem?: boolean
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensagenschat"]>

  export type mensagenschatSelectScalar = {
    id?: boolean
    usuario_id?: boolean
    mensagem?: boolean
  }

  export type mensagenschatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }
  export type mensagenschatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $mensagenschatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mensagenschat"
    objects: {
      usuarios: Prisma.$usuariosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario_id: number
      mensagem: string
    }, ExtArgs["result"]["mensagenschat"]>
    composites: {}
  }

  type mensagenschatGetPayload<S extends boolean | null | undefined | mensagenschatDefaultArgs> = $Result.GetResult<Prisma.$mensagenschatPayload, S>

  type mensagenschatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<mensagenschatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MensagenschatCountAggregateInputType | true
    }

  export interface mensagenschatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mensagenschat'], meta: { name: 'mensagenschat' } }
    /**
     * Find zero or one Mensagenschat that matches the filter.
     * @param {mensagenschatFindUniqueArgs} args - Arguments to find a Mensagenschat
     * @example
     * // Get one Mensagenschat
     * const mensagenschat = await prisma.mensagenschat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends mensagenschatFindUniqueArgs>(args: SelectSubset<T, mensagenschatFindUniqueArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mensagenschat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {mensagenschatFindUniqueOrThrowArgs} args - Arguments to find a Mensagenschat
     * @example
     * // Get one Mensagenschat
     * const mensagenschat = await prisma.mensagenschat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends mensagenschatFindUniqueOrThrowArgs>(args: SelectSubset<T, mensagenschatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mensagenschat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensagenschatFindFirstArgs} args - Arguments to find a Mensagenschat
     * @example
     * // Get one Mensagenschat
     * const mensagenschat = await prisma.mensagenschat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends mensagenschatFindFirstArgs>(args?: SelectSubset<T, mensagenschatFindFirstArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mensagenschat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensagenschatFindFirstOrThrowArgs} args - Arguments to find a Mensagenschat
     * @example
     * // Get one Mensagenschat
     * const mensagenschat = await prisma.mensagenschat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends mensagenschatFindFirstOrThrowArgs>(args?: SelectSubset<T, mensagenschatFindFirstOrThrowArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Mensagenschats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensagenschatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensagenschats
     * const mensagenschats = await prisma.mensagenschat.findMany()
     * 
     * // Get first 10 Mensagenschats
     * const mensagenschats = await prisma.mensagenschat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensagenschatWithIdOnly = await prisma.mensagenschat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends mensagenschatFindManyArgs>(args?: SelectSubset<T, mensagenschatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mensagenschat.
     * @param {mensagenschatCreateArgs} args - Arguments to create a Mensagenschat.
     * @example
     * // Create one Mensagenschat
     * const Mensagenschat = await prisma.mensagenschat.create({
     *   data: {
     *     // ... data to create a Mensagenschat
     *   }
     * })
     * 
     */
    create<T extends mensagenschatCreateArgs>(args: SelectSubset<T, mensagenschatCreateArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Mensagenschats.
     * @param {mensagenschatCreateManyArgs} args - Arguments to create many Mensagenschats.
     * @example
     * // Create many Mensagenschats
     * const mensagenschat = await prisma.mensagenschat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends mensagenschatCreateManyArgs>(args?: SelectSubset<T, mensagenschatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mensagenschats and returns the data saved in the database.
     * @param {mensagenschatCreateManyAndReturnArgs} args - Arguments to create many Mensagenschats.
     * @example
     * // Create many Mensagenschats
     * const mensagenschat = await prisma.mensagenschat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mensagenschats and only return the `id`
     * const mensagenschatWithIdOnly = await prisma.mensagenschat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends mensagenschatCreateManyAndReturnArgs>(args?: SelectSubset<T, mensagenschatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Mensagenschat.
     * @param {mensagenschatDeleteArgs} args - Arguments to delete one Mensagenschat.
     * @example
     * // Delete one Mensagenschat
     * const Mensagenschat = await prisma.mensagenschat.delete({
     *   where: {
     *     // ... filter to delete one Mensagenschat
     *   }
     * })
     * 
     */
    delete<T extends mensagenschatDeleteArgs>(args: SelectSubset<T, mensagenschatDeleteArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mensagenschat.
     * @param {mensagenschatUpdateArgs} args - Arguments to update one Mensagenschat.
     * @example
     * // Update one Mensagenschat
     * const mensagenschat = await prisma.mensagenschat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends mensagenschatUpdateArgs>(args: SelectSubset<T, mensagenschatUpdateArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Mensagenschats.
     * @param {mensagenschatDeleteManyArgs} args - Arguments to filter Mensagenschats to delete.
     * @example
     * // Delete a few Mensagenschats
     * const { count } = await prisma.mensagenschat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends mensagenschatDeleteManyArgs>(args?: SelectSubset<T, mensagenschatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensagenschats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensagenschatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensagenschats
     * const mensagenschat = await prisma.mensagenschat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends mensagenschatUpdateManyArgs>(args: SelectSubset<T, mensagenschatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensagenschat.
     * @param {mensagenschatUpsertArgs} args - Arguments to update or create a Mensagenschat.
     * @example
     * // Update or create a Mensagenschat
     * const mensagenschat = await prisma.mensagenschat.upsert({
     *   create: {
     *     // ... data to create a Mensagenschat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensagenschat we want to update
     *   }
     * })
     */
    upsert<T extends mensagenschatUpsertArgs>(args: SelectSubset<T, mensagenschatUpsertArgs<ExtArgs>>): Prisma__mensagenschatClient<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Mensagenschats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensagenschatCountArgs} args - Arguments to filter Mensagenschats to count.
     * @example
     * // Count the number of Mensagenschats
     * const count = await prisma.mensagenschat.count({
     *   where: {
     *     // ... the filter for the Mensagenschats we want to count
     *   }
     * })
    **/
    count<T extends mensagenschatCountArgs>(
      args?: Subset<T, mensagenschatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensagenschatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensagenschat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagenschatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensagenschatAggregateArgs>(args: Subset<T, MensagenschatAggregateArgs>): Prisma.PrismaPromise<GetMensagenschatAggregateType<T>>

    /**
     * Group by Mensagenschat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mensagenschatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mensagenschatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mensagenschatGroupByArgs['orderBy'] }
        : { orderBy?: mensagenschatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mensagenschatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensagenschatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mensagenschat model
   */
  readonly fields: mensagenschatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mensagenschat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mensagenschatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarios<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the mensagenschat model
   */ 
  interface mensagenschatFieldRefs {
    readonly id: FieldRef<"mensagenschat", 'Int'>
    readonly usuario_id: FieldRef<"mensagenschat", 'Int'>
    readonly mensagem: FieldRef<"mensagenschat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * mensagenschat findUnique
   */
  export type mensagenschatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * Filter, which mensagenschat to fetch.
     */
    where: mensagenschatWhereUniqueInput
  }

  /**
   * mensagenschat findUniqueOrThrow
   */
  export type mensagenschatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * Filter, which mensagenschat to fetch.
     */
    where: mensagenschatWhereUniqueInput
  }

  /**
   * mensagenschat findFirst
   */
  export type mensagenschatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * Filter, which mensagenschat to fetch.
     */
    where?: mensagenschatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensagenschats to fetch.
     */
    orderBy?: mensagenschatOrderByWithRelationInput | mensagenschatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mensagenschats.
     */
    cursor?: mensagenschatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensagenschats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensagenschats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mensagenschats.
     */
    distinct?: MensagenschatScalarFieldEnum | MensagenschatScalarFieldEnum[]
  }

  /**
   * mensagenschat findFirstOrThrow
   */
  export type mensagenschatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * Filter, which mensagenschat to fetch.
     */
    where?: mensagenschatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensagenschats to fetch.
     */
    orderBy?: mensagenschatOrderByWithRelationInput | mensagenschatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mensagenschats.
     */
    cursor?: mensagenschatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensagenschats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensagenschats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mensagenschats.
     */
    distinct?: MensagenschatScalarFieldEnum | MensagenschatScalarFieldEnum[]
  }

  /**
   * mensagenschat findMany
   */
  export type mensagenschatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * Filter, which mensagenschats to fetch.
     */
    where?: mensagenschatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mensagenschats to fetch.
     */
    orderBy?: mensagenschatOrderByWithRelationInput | mensagenschatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mensagenschats.
     */
    cursor?: mensagenschatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mensagenschats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mensagenschats.
     */
    skip?: number
    distinct?: MensagenschatScalarFieldEnum | MensagenschatScalarFieldEnum[]
  }

  /**
   * mensagenschat create
   */
  export type mensagenschatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * The data needed to create a mensagenschat.
     */
    data: XOR<mensagenschatCreateInput, mensagenschatUncheckedCreateInput>
  }

  /**
   * mensagenschat createMany
   */
  export type mensagenschatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mensagenschats.
     */
    data: mensagenschatCreateManyInput | mensagenschatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * mensagenschat createManyAndReturn
   */
  export type mensagenschatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many mensagenschats.
     */
    data: mensagenschatCreateManyInput | mensagenschatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * mensagenschat update
   */
  export type mensagenschatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * The data needed to update a mensagenschat.
     */
    data: XOR<mensagenschatUpdateInput, mensagenschatUncheckedUpdateInput>
    /**
     * Choose, which mensagenschat to update.
     */
    where: mensagenschatWhereUniqueInput
  }

  /**
   * mensagenschat updateMany
   */
  export type mensagenschatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mensagenschats.
     */
    data: XOR<mensagenschatUpdateManyMutationInput, mensagenschatUncheckedUpdateManyInput>
    /**
     * Filter which mensagenschats to update
     */
    where?: mensagenschatWhereInput
  }

  /**
   * mensagenschat upsert
   */
  export type mensagenschatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * The filter to search for the mensagenschat to update in case it exists.
     */
    where: mensagenschatWhereUniqueInput
    /**
     * In case the mensagenschat found by the `where` argument doesn't exist, create a new mensagenschat with this data.
     */
    create: XOR<mensagenschatCreateInput, mensagenschatUncheckedCreateInput>
    /**
     * In case the mensagenschat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mensagenschatUpdateInput, mensagenschatUncheckedUpdateInput>
  }

  /**
   * mensagenschat delete
   */
  export type mensagenschatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    /**
     * Filter which mensagenschat to delete.
     */
    where: mensagenschatWhereUniqueInput
  }

  /**
   * mensagenschat deleteMany
   */
  export type mensagenschatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mensagenschats to delete
     */
    where?: mensagenschatWhereInput
  }

  /**
   * mensagenschat without action
   */
  export type mensagenschatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
  }


  /**
   * Model trocas
   */

  export type AggregateTrocas = {
    _count: TrocasCountAggregateOutputType | null
    _avg: TrocasAvgAggregateOutputType | null
    _sum: TrocasSumAggregateOutputType | null
    _min: TrocasMinAggregateOutputType | null
    _max: TrocasMaxAggregateOutputType | null
  }

  export type TrocasAvgAggregateOutputType = {
    id: number | null
    livro_id: number | null
    usuario_id: number | null
  }

  export type TrocasSumAggregateOutputType = {
    id: number | null
    livro_id: number | null
    usuario_id: number | null
  }

  export type TrocasMinAggregateOutputType = {
    id: number | null
    livro_id: number | null
    usuario_id: number | null
    status: $Enums.status_enum | null
  }

  export type TrocasMaxAggregateOutputType = {
    id: number | null
    livro_id: number | null
    usuario_id: number | null
    status: $Enums.status_enum | null
  }

  export type TrocasCountAggregateOutputType = {
    id: number
    livro_id: number
    usuario_id: number
    status: number
    _all: number
  }


  export type TrocasAvgAggregateInputType = {
    id?: true
    livro_id?: true
    usuario_id?: true
  }

  export type TrocasSumAggregateInputType = {
    id?: true
    livro_id?: true
    usuario_id?: true
  }

  export type TrocasMinAggregateInputType = {
    id?: true
    livro_id?: true
    usuario_id?: true
    status?: true
  }

  export type TrocasMaxAggregateInputType = {
    id?: true
    livro_id?: true
    usuario_id?: true
    status?: true
  }

  export type TrocasCountAggregateInputType = {
    id?: true
    livro_id?: true
    usuario_id?: true
    status?: true
    _all?: true
  }

  export type TrocasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trocas to aggregate.
     */
    where?: trocasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trocas to fetch.
     */
    orderBy?: trocasOrderByWithRelationInput | trocasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trocasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trocas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trocas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trocas
    **/
    _count?: true | TrocasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrocasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrocasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrocasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrocasMaxAggregateInputType
  }

  export type GetTrocasAggregateType<T extends TrocasAggregateArgs> = {
        [P in keyof T & keyof AggregateTrocas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrocas[P]>
      : GetScalarType<T[P], AggregateTrocas[P]>
  }




  export type trocasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trocasWhereInput
    orderBy?: trocasOrderByWithAggregationInput | trocasOrderByWithAggregationInput[]
    by: TrocasScalarFieldEnum[] | TrocasScalarFieldEnum
    having?: trocasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrocasCountAggregateInputType | true
    _avg?: TrocasAvgAggregateInputType
    _sum?: TrocasSumAggregateInputType
    _min?: TrocasMinAggregateInputType
    _max?: TrocasMaxAggregateInputType
  }

  export type TrocasGroupByOutputType = {
    id: number
    livro_id: number
    usuario_id: number
    status: $Enums.status_enum
    _count: TrocasCountAggregateOutputType | null
    _avg: TrocasAvgAggregateOutputType | null
    _sum: TrocasSumAggregateOutputType | null
    _min: TrocasMinAggregateOutputType | null
    _max: TrocasMaxAggregateOutputType | null
  }

  type GetTrocasGroupByPayload<T extends trocasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrocasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrocasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrocasGroupByOutputType[P]>
            : GetScalarType<T[P], TrocasGroupByOutputType[P]>
        }
      >
    >


  export type trocasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    livro_id?: boolean
    usuario_id?: boolean
    status?: boolean
    historicotransacoes?: boolean | trocas$historicotransacoesArgs<ExtArgs>
    livros?: boolean | livrosDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
    _count?: boolean | TrocasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trocas"]>

  export type trocasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    livro_id?: boolean
    usuario_id?: boolean
    status?: boolean
    livros?: boolean | livrosDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trocas"]>

  export type trocasSelectScalar = {
    id?: boolean
    livro_id?: boolean
    usuario_id?: boolean
    status?: boolean
  }

  export type trocasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historicotransacoes?: boolean | trocas$historicotransacoesArgs<ExtArgs>
    livros?: boolean | livrosDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
    _count?: boolean | TrocasCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type trocasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    livros?: boolean | livrosDefaultArgs<ExtArgs>
    usuarios?: boolean | usuariosDefaultArgs<ExtArgs>
  }

  export type $trocasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trocas"
    objects: {
      historicotransacoes: Prisma.$historicotransacoesPayload<ExtArgs>[]
      livros: Prisma.$livrosPayload<ExtArgs>
      usuarios: Prisma.$usuariosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      livro_id: number
      usuario_id: number
      status: $Enums.status_enum
    }, ExtArgs["result"]["trocas"]>
    composites: {}
  }

  type trocasGetPayload<S extends boolean | null | undefined | trocasDefaultArgs> = $Result.GetResult<Prisma.$trocasPayload, S>

  type trocasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<trocasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TrocasCountAggregateInputType | true
    }

  export interface trocasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trocas'], meta: { name: 'trocas' } }
    /**
     * Find zero or one Trocas that matches the filter.
     * @param {trocasFindUniqueArgs} args - Arguments to find a Trocas
     * @example
     * // Get one Trocas
     * const trocas = await prisma.trocas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trocasFindUniqueArgs>(args: SelectSubset<T, trocasFindUniqueArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Trocas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {trocasFindUniqueOrThrowArgs} args - Arguments to find a Trocas
     * @example
     * // Get one Trocas
     * const trocas = await prisma.trocas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trocasFindUniqueOrThrowArgs>(args: SelectSubset<T, trocasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Trocas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trocasFindFirstArgs} args - Arguments to find a Trocas
     * @example
     * // Get one Trocas
     * const trocas = await prisma.trocas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trocasFindFirstArgs>(args?: SelectSubset<T, trocasFindFirstArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Trocas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trocasFindFirstOrThrowArgs} args - Arguments to find a Trocas
     * @example
     * // Get one Trocas
     * const trocas = await prisma.trocas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trocasFindFirstOrThrowArgs>(args?: SelectSubset<T, trocasFindFirstOrThrowArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trocas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trocasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trocas
     * const trocas = await prisma.trocas.findMany()
     * 
     * // Get first 10 Trocas
     * const trocas = await prisma.trocas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trocasWithIdOnly = await prisma.trocas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trocasFindManyArgs>(args?: SelectSubset<T, trocasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Trocas.
     * @param {trocasCreateArgs} args - Arguments to create a Trocas.
     * @example
     * // Create one Trocas
     * const Trocas = await prisma.trocas.create({
     *   data: {
     *     // ... data to create a Trocas
     *   }
     * })
     * 
     */
    create<T extends trocasCreateArgs>(args: SelectSubset<T, trocasCreateArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trocas.
     * @param {trocasCreateManyArgs} args - Arguments to create many Trocas.
     * @example
     * // Create many Trocas
     * const trocas = await prisma.trocas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trocasCreateManyArgs>(args?: SelectSubset<T, trocasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trocas and returns the data saved in the database.
     * @param {trocasCreateManyAndReturnArgs} args - Arguments to create many Trocas.
     * @example
     * // Create many Trocas
     * const trocas = await prisma.trocas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trocas and only return the `id`
     * const trocasWithIdOnly = await prisma.trocas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends trocasCreateManyAndReturnArgs>(args?: SelectSubset<T, trocasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Trocas.
     * @param {trocasDeleteArgs} args - Arguments to delete one Trocas.
     * @example
     * // Delete one Trocas
     * const Trocas = await prisma.trocas.delete({
     *   where: {
     *     // ... filter to delete one Trocas
     *   }
     * })
     * 
     */
    delete<T extends trocasDeleteArgs>(args: SelectSubset<T, trocasDeleteArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Trocas.
     * @param {trocasUpdateArgs} args - Arguments to update one Trocas.
     * @example
     * // Update one Trocas
     * const trocas = await prisma.trocas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trocasUpdateArgs>(args: SelectSubset<T, trocasUpdateArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trocas.
     * @param {trocasDeleteManyArgs} args - Arguments to filter Trocas to delete.
     * @example
     * // Delete a few Trocas
     * const { count } = await prisma.trocas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trocasDeleteManyArgs>(args?: SelectSubset<T, trocasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trocas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trocasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trocas
     * const trocas = await prisma.trocas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trocasUpdateManyArgs>(args: SelectSubset<T, trocasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trocas.
     * @param {trocasUpsertArgs} args - Arguments to update or create a Trocas.
     * @example
     * // Update or create a Trocas
     * const trocas = await prisma.trocas.upsert({
     *   create: {
     *     // ... data to create a Trocas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trocas we want to update
     *   }
     * })
     */
    upsert<T extends trocasUpsertArgs>(args: SelectSubset<T, trocasUpsertArgs<ExtArgs>>): Prisma__trocasClient<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trocas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trocasCountArgs} args - Arguments to filter Trocas to count.
     * @example
     * // Count the number of Trocas
     * const count = await prisma.trocas.count({
     *   where: {
     *     // ... the filter for the Trocas we want to count
     *   }
     * })
    **/
    count<T extends trocasCountArgs>(
      args?: Subset<T, trocasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrocasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trocas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrocasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrocasAggregateArgs>(args: Subset<T, TrocasAggregateArgs>): Prisma.PrismaPromise<GetTrocasAggregateType<T>>

    /**
     * Group by Trocas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trocasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trocasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trocasGroupByArgs['orderBy'] }
        : { orderBy?: trocasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trocasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrocasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trocas model
   */
  readonly fields: trocasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trocas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trocasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    historicotransacoes<T extends trocas$historicotransacoesArgs<ExtArgs> = {}>(args?: Subset<T, trocas$historicotransacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findMany"> | Null>
    livros<T extends livrosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, livrosDefaultArgs<ExtArgs>>): Prisma__livrosClient<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usuarios<T extends usuariosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usuariosDefaultArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trocas model
   */ 
  interface trocasFieldRefs {
    readonly id: FieldRef<"trocas", 'Int'>
    readonly livro_id: FieldRef<"trocas", 'Int'>
    readonly usuario_id: FieldRef<"trocas", 'Int'>
    readonly status: FieldRef<"trocas", 'status_enum'>
  }
    

  // Custom InputTypes
  /**
   * trocas findUnique
   */
  export type trocasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * Filter, which trocas to fetch.
     */
    where: trocasWhereUniqueInput
  }

  /**
   * trocas findUniqueOrThrow
   */
  export type trocasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * Filter, which trocas to fetch.
     */
    where: trocasWhereUniqueInput
  }

  /**
   * trocas findFirst
   */
  export type trocasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * Filter, which trocas to fetch.
     */
    where?: trocasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trocas to fetch.
     */
    orderBy?: trocasOrderByWithRelationInput | trocasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trocas.
     */
    cursor?: trocasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trocas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trocas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trocas.
     */
    distinct?: TrocasScalarFieldEnum | TrocasScalarFieldEnum[]
  }

  /**
   * trocas findFirstOrThrow
   */
  export type trocasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * Filter, which trocas to fetch.
     */
    where?: trocasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trocas to fetch.
     */
    orderBy?: trocasOrderByWithRelationInput | trocasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trocas.
     */
    cursor?: trocasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trocas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trocas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trocas.
     */
    distinct?: TrocasScalarFieldEnum | TrocasScalarFieldEnum[]
  }

  /**
   * trocas findMany
   */
  export type trocasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * Filter, which trocas to fetch.
     */
    where?: trocasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trocas to fetch.
     */
    orderBy?: trocasOrderByWithRelationInput | trocasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trocas.
     */
    cursor?: trocasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trocas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trocas.
     */
    skip?: number
    distinct?: TrocasScalarFieldEnum | TrocasScalarFieldEnum[]
  }

  /**
   * trocas create
   */
  export type trocasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * The data needed to create a trocas.
     */
    data: XOR<trocasCreateInput, trocasUncheckedCreateInput>
  }

  /**
   * trocas createMany
   */
  export type trocasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trocas.
     */
    data: trocasCreateManyInput | trocasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * trocas createManyAndReturn
   */
  export type trocasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many trocas.
     */
    data: trocasCreateManyInput | trocasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * trocas update
   */
  export type trocasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * The data needed to update a trocas.
     */
    data: XOR<trocasUpdateInput, trocasUncheckedUpdateInput>
    /**
     * Choose, which trocas to update.
     */
    where: trocasWhereUniqueInput
  }

  /**
   * trocas updateMany
   */
  export type trocasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trocas.
     */
    data: XOR<trocasUpdateManyMutationInput, trocasUncheckedUpdateManyInput>
    /**
     * Filter which trocas to update
     */
    where?: trocasWhereInput
  }

  /**
   * trocas upsert
   */
  export type trocasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * The filter to search for the trocas to update in case it exists.
     */
    where: trocasWhereUniqueInput
    /**
     * In case the trocas found by the `where` argument doesn't exist, create a new trocas with this data.
     */
    create: XOR<trocasCreateInput, trocasUncheckedCreateInput>
    /**
     * In case the trocas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trocasUpdateInput, trocasUncheckedUpdateInput>
  }

  /**
   * trocas delete
   */
  export type trocasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    /**
     * Filter which trocas to delete.
     */
    where: trocasWhereUniqueInput
  }

  /**
   * trocas deleteMany
   */
  export type trocasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trocas to delete
     */
    where?: trocasWhereInput
  }

  /**
   * trocas.historicotransacoes
   */
  export type trocas$historicotransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    where?: historicotransacoesWhereInput
    orderBy?: historicotransacoesOrderByWithRelationInput | historicotransacoesOrderByWithRelationInput[]
    cursor?: historicotransacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricotransacoesScalarFieldEnum | HistoricotransacoesScalarFieldEnum[]
  }

  /**
   * trocas without action
   */
  export type trocasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
  }


  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
    reputacao: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
    reputacao: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    reputacao: number | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    reputacao: number | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    reputacao: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
    reputacao?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
    reputacao?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    reputacao?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    reputacao?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    reputacao?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    reputacao: number
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    reputacao?: boolean
    avaliacoes?: boolean | usuarios$avaliacoesArgs<ExtArgs>
    historicotransacoes?: boolean | usuarios$historicotransacoesArgs<ExtArgs>
    livros?: boolean | usuarios$livrosArgs<ExtArgs>
    mensagenschat?: boolean | usuarios$mensagenschatArgs<ExtArgs>
    trocas?: boolean | usuarios$trocasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    reputacao?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    reputacao?: boolean
  }

  export type usuariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avaliacoes?: boolean | usuarios$avaliacoesArgs<ExtArgs>
    historicotransacoes?: boolean | usuarios$historicotransacoesArgs<ExtArgs>
    livros?: boolean | usuarios$livrosArgs<ExtArgs>
    mensagenschat?: boolean | usuarios$mensagenschatArgs<ExtArgs>
    trocas?: boolean | usuarios$trocasArgs<ExtArgs>
    _count?: boolean | UsuariosCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usuariosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {
      avaliacoes: Prisma.$avaliacoesPayload<ExtArgs>[]
      historicotransacoes: Prisma.$historicotransacoesPayload<ExtArgs>[]
      livros: Prisma.$livrosPayload<ExtArgs>[]
      mensagenschat: Prisma.$mensagenschatPayload<ExtArgs>[]
      trocas: Prisma.$trocasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      reputacao: number
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuariosFindUniqueArgs>(args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuariosFindFirstArgs>(args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuariosFindManyArgs>(args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends usuariosCreateArgs>(args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuariosCreateManyArgs>(args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuariosCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usuariosCreateManyAndReturnArgs>(args?: SelectSubset<T, usuariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends usuariosDeleteArgs>(args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuariosUpdateArgs>(args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuariosDeleteManyArgs>(args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuariosUpdateManyArgs>(args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends usuariosUpsertArgs>(args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    avaliacoes<T extends usuarios$avaliacoesArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$avaliacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$avaliacoesPayload<ExtArgs>, T, "findMany"> | Null>
    historicotransacoes<T extends usuarios$historicotransacoesArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$historicotransacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$historicotransacoesPayload<ExtArgs>, T, "findMany"> | Null>
    livros<T extends usuarios$livrosArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$livrosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$livrosPayload<ExtArgs>, T, "findMany"> | Null>
    mensagenschat<T extends usuarios$mensagenschatArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$mensagenschatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mensagenschatPayload<ExtArgs>, T, "findMany"> | Null>
    trocas<T extends usuarios$trocasArgs<ExtArgs> = {}>(args?: Subset<T, usuarios$trocasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trocasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuarios model
   */ 
  interface usuariosFieldRefs {
    readonly id: FieldRef<"usuarios", 'Int'>
    readonly nome: FieldRef<"usuarios", 'String'>
    readonly email: FieldRef<"usuarios", 'String'>
    readonly senha: FieldRef<"usuarios", 'String'>
    readonly reputacao: FieldRef<"usuarios", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }

  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios createManyAndReturn
   */
  export type usuariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
  }

  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }

  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
  }

  /**
   * usuarios.avaliacoes
   */
  export type usuarios$avaliacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the avaliacoes
     */
    select?: avaliacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: avaliacoesInclude<ExtArgs> | null
    where?: avaliacoesWhereInput
    orderBy?: avaliacoesOrderByWithRelationInput | avaliacoesOrderByWithRelationInput[]
    cursor?: avaliacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvaliacoesScalarFieldEnum | AvaliacoesScalarFieldEnum[]
  }

  /**
   * usuarios.historicotransacoes
   */
  export type usuarios$historicotransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the historicotransacoes
     */
    select?: historicotransacoesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: historicotransacoesInclude<ExtArgs> | null
    where?: historicotransacoesWhereInput
    orderBy?: historicotransacoesOrderByWithRelationInput | historicotransacoesOrderByWithRelationInput[]
    cursor?: historicotransacoesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricotransacoesScalarFieldEnum | HistoricotransacoesScalarFieldEnum[]
  }

  /**
   * usuarios.livros
   */
  export type usuarios$livrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the livros
     */
    select?: livrosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: livrosInclude<ExtArgs> | null
    where?: livrosWhereInput
    orderBy?: livrosOrderByWithRelationInput | livrosOrderByWithRelationInput[]
    cursor?: livrosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LivrosScalarFieldEnum | LivrosScalarFieldEnum[]
  }

  /**
   * usuarios.mensagenschat
   */
  export type usuarios$mensagenschatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mensagenschat
     */
    select?: mensagenschatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mensagenschatInclude<ExtArgs> | null
    where?: mensagenschatWhereInput
    orderBy?: mensagenschatOrderByWithRelationInput | mensagenschatOrderByWithRelationInput[]
    cursor?: mensagenschatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensagenschatScalarFieldEnum | MensagenschatScalarFieldEnum[]
  }

  /**
   * usuarios.trocas
   */
  export type usuarios$trocasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trocas
     */
    select?: trocasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trocasInclude<ExtArgs> | null
    where?: trocasWhereInput
    orderBy?: trocasOrderByWithRelationInput | trocasOrderByWithRelationInput[]
    cursor?: trocasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrocasScalarFieldEnum | TrocasScalarFieldEnum[]
  }

  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usuariosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AvaliacoesScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    nota: 'nota',
    comentario: 'comentario'
  };

  export type AvaliacoesScalarFieldEnum = (typeof AvaliacoesScalarFieldEnum)[keyof typeof AvaliacoesScalarFieldEnum]


  export const HistoricotransacoesScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    troca_id: 'troca_id'
  };

  export type HistoricotransacoesScalarFieldEnum = (typeof HistoricotransacoesScalarFieldEnum)[keyof typeof HistoricotransacoesScalarFieldEnum]


  export const LivrosScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    titulo: 'titulo',
    autor: 'autor',
    genero: 'genero',
    ano_publicacao: 'ano_publicacao'
  };

  export type LivrosScalarFieldEnum = (typeof LivrosScalarFieldEnum)[keyof typeof LivrosScalarFieldEnum]


  export const MensagenschatScalarFieldEnum: {
    id: 'id',
    usuario_id: 'usuario_id',
    mensagem: 'mensagem'
  };

  export type MensagenschatScalarFieldEnum = (typeof MensagenschatScalarFieldEnum)[keyof typeof MensagenschatScalarFieldEnum]


  export const TrocasScalarFieldEnum: {
    id: 'id',
    livro_id: 'livro_id',
    usuario_id: 'usuario_id',
    status: 'status'
  };

  export type TrocasScalarFieldEnum = (typeof TrocasScalarFieldEnum)[keyof typeof TrocasScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    reputacao: 'reputacao'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'status_enum'
   */
  export type Enumstatus_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status_enum'>
    


  /**
   * Reference to a field of type 'status_enum[]'
   */
  export type ListEnumstatus_enumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status_enum[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type avaliacoesWhereInput = {
    AND?: avaliacoesWhereInput | avaliacoesWhereInput[]
    OR?: avaliacoesWhereInput[]
    NOT?: avaliacoesWhereInput | avaliacoesWhereInput[]
    id?: IntFilter<"avaliacoes"> | number
    usuario_id?: IntNullableFilter<"avaliacoes"> | number | null
    nota?: IntNullableFilter<"avaliacoes"> | number | null
    comentario?: StringNullableFilter<"avaliacoes"> | string | null
    usuarios?: XOR<UsuariosNullableRelationFilter, usuariosWhereInput> | null
  }

  export type avaliacoesOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrderInput | SortOrder
    nota?: SortOrderInput | SortOrder
    comentario?: SortOrderInput | SortOrder
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type avaliacoesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: avaliacoesWhereInput | avaliacoesWhereInput[]
    OR?: avaliacoesWhereInput[]
    NOT?: avaliacoesWhereInput | avaliacoesWhereInput[]
    usuario_id?: IntNullableFilter<"avaliacoes"> | number | null
    nota?: IntNullableFilter<"avaliacoes"> | number | null
    comentario?: StringNullableFilter<"avaliacoes"> | string | null
    usuarios?: XOR<UsuariosNullableRelationFilter, usuariosWhereInput> | null
  }, "id">

  export type avaliacoesOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrderInput | SortOrder
    nota?: SortOrderInput | SortOrder
    comentario?: SortOrderInput | SortOrder
    _count?: avaliacoesCountOrderByAggregateInput
    _avg?: avaliacoesAvgOrderByAggregateInput
    _max?: avaliacoesMaxOrderByAggregateInput
    _min?: avaliacoesMinOrderByAggregateInput
    _sum?: avaliacoesSumOrderByAggregateInput
  }

  export type avaliacoesScalarWhereWithAggregatesInput = {
    AND?: avaliacoesScalarWhereWithAggregatesInput | avaliacoesScalarWhereWithAggregatesInput[]
    OR?: avaliacoesScalarWhereWithAggregatesInput[]
    NOT?: avaliacoesScalarWhereWithAggregatesInput | avaliacoesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"avaliacoes"> | number
    usuario_id?: IntNullableWithAggregatesFilter<"avaliacoes"> | number | null
    nota?: IntNullableWithAggregatesFilter<"avaliacoes"> | number | null
    comentario?: StringNullableWithAggregatesFilter<"avaliacoes"> | string | null
  }

  export type historicotransacoesWhereInput = {
    AND?: historicotransacoesWhereInput | historicotransacoesWhereInput[]
    OR?: historicotransacoesWhereInput[]
    NOT?: historicotransacoesWhereInput | historicotransacoesWhereInput[]
    id?: IntFilter<"historicotransacoes"> | number
    usuario_id?: IntFilter<"historicotransacoes"> | number
    troca_id?: IntFilter<"historicotransacoes"> | number
    trocas?: XOR<TrocasRelationFilter, trocasWhereInput>
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type historicotransacoesOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
    trocas?: trocasOrderByWithRelationInput
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type historicotransacoesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: historicotransacoesWhereInput | historicotransacoesWhereInput[]
    OR?: historicotransacoesWhereInput[]
    NOT?: historicotransacoesWhereInput | historicotransacoesWhereInput[]
    usuario_id?: IntFilter<"historicotransacoes"> | number
    troca_id?: IntFilter<"historicotransacoes"> | number
    trocas?: XOR<TrocasRelationFilter, trocasWhereInput>
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }, "id">

  export type historicotransacoesOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
    _count?: historicotransacoesCountOrderByAggregateInput
    _avg?: historicotransacoesAvgOrderByAggregateInput
    _max?: historicotransacoesMaxOrderByAggregateInput
    _min?: historicotransacoesMinOrderByAggregateInput
    _sum?: historicotransacoesSumOrderByAggregateInput
  }

  export type historicotransacoesScalarWhereWithAggregatesInput = {
    AND?: historicotransacoesScalarWhereWithAggregatesInput | historicotransacoesScalarWhereWithAggregatesInput[]
    OR?: historicotransacoesScalarWhereWithAggregatesInput[]
    NOT?: historicotransacoesScalarWhereWithAggregatesInput | historicotransacoesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"historicotransacoes"> | number
    usuario_id?: IntWithAggregatesFilter<"historicotransacoes"> | number
    troca_id?: IntWithAggregatesFilter<"historicotransacoes"> | number
  }

  export type livrosWhereInput = {
    AND?: livrosWhereInput | livrosWhereInput[]
    OR?: livrosWhereInput[]
    NOT?: livrosWhereInput | livrosWhereInput[]
    id?: IntFilter<"livros"> | number
    usuario_id?: IntFilter<"livros"> | number
    titulo?: StringFilter<"livros"> | string
    autor?: StringFilter<"livros"> | string
    genero?: StringFilter<"livros"> | string
    ano_publicacao?: IntFilter<"livros"> | number
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
    trocas?: TrocasListRelationFilter
  }

  export type livrosOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    titulo?: SortOrder
    autor?: SortOrder
    genero?: SortOrder
    ano_publicacao?: SortOrder
    usuarios?: usuariosOrderByWithRelationInput
    trocas?: trocasOrderByRelationAggregateInput
  }

  export type livrosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: livrosWhereInput | livrosWhereInput[]
    OR?: livrosWhereInput[]
    NOT?: livrosWhereInput | livrosWhereInput[]
    usuario_id?: IntFilter<"livros"> | number
    titulo?: StringFilter<"livros"> | string
    autor?: StringFilter<"livros"> | string
    genero?: StringFilter<"livros"> | string
    ano_publicacao?: IntFilter<"livros"> | number
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
    trocas?: TrocasListRelationFilter
  }, "id">

  export type livrosOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    titulo?: SortOrder
    autor?: SortOrder
    genero?: SortOrder
    ano_publicacao?: SortOrder
    _count?: livrosCountOrderByAggregateInput
    _avg?: livrosAvgOrderByAggregateInput
    _max?: livrosMaxOrderByAggregateInput
    _min?: livrosMinOrderByAggregateInput
    _sum?: livrosSumOrderByAggregateInput
  }

  export type livrosScalarWhereWithAggregatesInput = {
    AND?: livrosScalarWhereWithAggregatesInput | livrosScalarWhereWithAggregatesInput[]
    OR?: livrosScalarWhereWithAggregatesInput[]
    NOT?: livrosScalarWhereWithAggregatesInput | livrosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"livros"> | number
    usuario_id?: IntWithAggregatesFilter<"livros"> | number
    titulo?: StringWithAggregatesFilter<"livros"> | string
    autor?: StringWithAggregatesFilter<"livros"> | string
    genero?: StringWithAggregatesFilter<"livros"> | string
    ano_publicacao?: IntWithAggregatesFilter<"livros"> | number
  }

  export type mensagenschatWhereInput = {
    AND?: mensagenschatWhereInput | mensagenschatWhereInput[]
    OR?: mensagenschatWhereInput[]
    NOT?: mensagenschatWhereInput | mensagenschatWhereInput[]
    id?: IntFilter<"mensagenschat"> | number
    usuario_id?: IntFilter<"mensagenschat"> | number
    mensagem?: StringFilter<"mensagenschat"> | string
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type mensagenschatOrderByWithRelationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    mensagem?: SortOrder
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type mensagenschatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: mensagenschatWhereInput | mensagenschatWhereInput[]
    OR?: mensagenschatWhereInput[]
    NOT?: mensagenschatWhereInput | mensagenschatWhereInput[]
    usuario_id?: IntFilter<"mensagenschat"> | number
    mensagem?: StringFilter<"mensagenschat"> | string
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }, "id">

  export type mensagenschatOrderByWithAggregationInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    mensagem?: SortOrder
    _count?: mensagenschatCountOrderByAggregateInput
    _avg?: mensagenschatAvgOrderByAggregateInput
    _max?: mensagenschatMaxOrderByAggregateInput
    _min?: mensagenschatMinOrderByAggregateInput
    _sum?: mensagenschatSumOrderByAggregateInput
  }

  export type mensagenschatScalarWhereWithAggregatesInput = {
    AND?: mensagenschatScalarWhereWithAggregatesInput | mensagenschatScalarWhereWithAggregatesInput[]
    OR?: mensagenschatScalarWhereWithAggregatesInput[]
    NOT?: mensagenschatScalarWhereWithAggregatesInput | mensagenschatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"mensagenschat"> | number
    usuario_id?: IntWithAggregatesFilter<"mensagenschat"> | number
    mensagem?: StringWithAggregatesFilter<"mensagenschat"> | string
  }

  export type trocasWhereInput = {
    AND?: trocasWhereInput | trocasWhereInput[]
    OR?: trocasWhereInput[]
    NOT?: trocasWhereInput | trocasWhereInput[]
    id?: IntFilter<"trocas"> | number
    livro_id?: IntFilter<"trocas"> | number
    usuario_id?: IntFilter<"trocas"> | number
    status?: Enumstatus_enumFilter<"trocas"> | $Enums.status_enum
    historicotransacoes?: HistoricotransacoesListRelationFilter
    livros?: XOR<LivrosRelationFilter, livrosWhereInput>
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }

  export type trocasOrderByWithRelationInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
    status?: SortOrder
    historicotransacoes?: historicotransacoesOrderByRelationAggregateInput
    livros?: livrosOrderByWithRelationInput
    usuarios?: usuariosOrderByWithRelationInput
  }

  export type trocasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: trocasWhereInput | trocasWhereInput[]
    OR?: trocasWhereInput[]
    NOT?: trocasWhereInput | trocasWhereInput[]
    livro_id?: IntFilter<"trocas"> | number
    usuario_id?: IntFilter<"trocas"> | number
    status?: Enumstatus_enumFilter<"trocas"> | $Enums.status_enum
    historicotransacoes?: HistoricotransacoesListRelationFilter
    livros?: XOR<LivrosRelationFilter, livrosWhereInput>
    usuarios?: XOR<UsuariosRelationFilter, usuariosWhereInput>
  }, "id">

  export type trocasOrderByWithAggregationInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
    status?: SortOrder
    _count?: trocasCountOrderByAggregateInput
    _avg?: trocasAvgOrderByAggregateInput
    _max?: trocasMaxOrderByAggregateInput
    _min?: trocasMinOrderByAggregateInput
    _sum?: trocasSumOrderByAggregateInput
  }

  export type trocasScalarWhereWithAggregatesInput = {
    AND?: trocasScalarWhereWithAggregatesInput | trocasScalarWhereWithAggregatesInput[]
    OR?: trocasScalarWhereWithAggregatesInput[]
    NOT?: trocasScalarWhereWithAggregatesInput | trocasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trocas"> | number
    livro_id?: IntWithAggregatesFilter<"trocas"> | number
    usuario_id?: IntWithAggregatesFilter<"trocas"> | number
    status?: Enumstatus_enumWithAggregatesFilter<"trocas"> | $Enums.status_enum
  }

  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    id?: IntFilter<"usuarios"> | number
    nome?: StringFilter<"usuarios"> | string
    email?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    reputacao?: FloatFilter<"usuarios"> | number
    avaliacoes?: AvaliacoesListRelationFilter
    historicotransacoes?: HistoricotransacoesListRelationFilter
    livros?: LivrosListRelationFilter
    mensagenschat?: MensagenschatListRelationFilter
    trocas?: TrocasListRelationFilter
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    reputacao?: SortOrder
    avaliacoes?: avaliacoesOrderByRelationAggregateInput
    historicotransacoes?: historicotransacoesOrderByRelationAggregateInput
    livros?: livrosOrderByRelationAggregateInput
    mensagenschat?: mensagenschatOrderByRelationAggregateInput
    trocas?: trocasOrderByRelationAggregateInput
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    nome?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
    reputacao?: FloatFilter<"usuarios"> | number
    avaliacoes?: AvaliacoesListRelationFilter
    historicotransacoes?: HistoricotransacoesListRelationFilter
    livros?: LivrosListRelationFilter
    mensagenschat?: MensagenschatListRelationFilter
    trocas?: TrocasListRelationFilter
  }, "id" | "email">

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    reputacao?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuarios"> | number
    nome?: StringWithAggregatesFilter<"usuarios"> | string
    email?: StringWithAggregatesFilter<"usuarios"> | string
    senha?: StringWithAggregatesFilter<"usuarios"> | string
    reputacao?: FloatWithAggregatesFilter<"usuarios"> | number
  }

  export type avaliacoesCreateInput = {
    nota?: number | null
    comentario?: string | null
    usuarios?: usuariosCreateNestedOneWithoutAvaliacoesInput
  }

  export type avaliacoesUncheckedCreateInput = {
    id?: number
    usuario_id?: number | null
    nota?: number | null
    comentario?: string | null
  }

  export type avaliacoesUpdateInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
    usuarios?: usuariosUpdateOneWithoutAvaliacoesNestedInput
  }

  export type avaliacoesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avaliacoesCreateManyInput = {
    id?: number
    usuario_id?: number | null
    nota?: number | null
    comentario?: string | null
  }

  export type avaliacoesUpdateManyMutationInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avaliacoesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: NullableIntFieldUpdateOperationsInput | number | null
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historicotransacoesCreateInput = {
    trocas: trocasCreateNestedOneWithoutHistoricotransacoesInput
    usuarios: usuariosCreateNestedOneWithoutHistoricotransacoesInput
  }

  export type historicotransacoesUncheckedCreateInput = {
    id?: number
    usuario_id: number
    troca_id: number
  }

  export type historicotransacoesUpdateInput = {
    trocas?: trocasUpdateOneRequiredWithoutHistoricotransacoesNestedInput
    usuarios?: usuariosUpdateOneRequiredWithoutHistoricotransacoesNestedInput
  }

  export type historicotransacoesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    troca_id?: IntFieldUpdateOperationsInput | number
  }

  export type historicotransacoesCreateManyInput = {
    id?: number
    usuario_id: number
    troca_id: number
  }

  export type historicotransacoesUpdateManyMutationInput = {

  }

  export type historicotransacoesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    troca_id?: IntFieldUpdateOperationsInput | number
  }

  export type livrosCreateInput = {
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
    usuarios: usuariosCreateNestedOneWithoutLivrosInput
    trocas?: trocasCreateNestedManyWithoutLivrosInput
  }

  export type livrosUncheckedCreateInput = {
    id?: number
    usuario_id: number
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
    trocas?: trocasUncheckedCreateNestedManyWithoutLivrosInput
  }

  export type livrosUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
    usuarios?: usuariosUpdateOneRequiredWithoutLivrosNestedInput
    trocas?: trocasUpdateManyWithoutLivrosNestedInput
  }

  export type livrosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
    trocas?: trocasUncheckedUpdateManyWithoutLivrosNestedInput
  }

  export type livrosCreateManyInput = {
    id?: number
    usuario_id: number
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
  }

  export type livrosUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
  }

  export type livrosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
  }

  export type mensagenschatCreateInput = {
    mensagem: string
    usuarios: usuariosCreateNestedOneWithoutMensagenschatInput
  }

  export type mensagenschatUncheckedCreateInput = {
    id?: number
    usuario_id: number
    mensagem: string
  }

  export type mensagenschatUpdateInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
    usuarios?: usuariosUpdateOneRequiredWithoutMensagenschatNestedInput
  }

  export type mensagenschatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
  }

  export type mensagenschatCreateManyInput = {
    id?: number
    usuario_id: number
    mensagem: string
  }

  export type mensagenschatUpdateManyMutationInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
  }

  export type mensagenschatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
  }

  export type trocasCreateInput = {
    status?: $Enums.status_enum
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutTrocasInput
    livros: livrosCreateNestedOneWithoutTrocasInput
    usuarios: usuariosCreateNestedOneWithoutTrocasInput
  }

  export type trocasUncheckedCreateInput = {
    id?: number
    livro_id: number
    usuario_id: number
    status?: $Enums.status_enum
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutTrocasInput
  }

  export type trocasUpdateInput = {
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    historicotransacoes?: historicotransacoesUpdateManyWithoutTrocasNestedInput
    livros?: livrosUpdateOneRequiredWithoutTrocasNestedInput
    usuarios?: usuariosUpdateOneRequiredWithoutTrocasNestedInput
  }

  export type trocasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    livro_id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutTrocasNestedInput
  }

  export type trocasCreateManyInput = {
    id?: number
    livro_id: number
    usuario_id: number
    status?: $Enums.status_enum
  }

  export type trocasUpdateManyMutationInput = {
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
  }

  export type trocasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    livro_id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
  }

  export type usuariosCreateInput = {
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutUsuariosInput
    livros?: livrosCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatCreateNestedManyWithoutUsuariosInput
    trocas?: trocasCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutUsuariosInput
    livros?: livrosUncheckedCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatUncheckedCreateNestedManyWithoutUsuariosInput
    trocas?: trocasUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUncheckedUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUncheckedUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
  }

  export type usuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuariosNullableRelationFilter = {
    is?: usuariosWhereInput | null
    isNot?: usuariosWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type avaliacoesCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nota?: SortOrder
    comentario?: SortOrder
  }

  export type avaliacoesAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nota?: SortOrder
  }

  export type avaliacoesMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nota?: SortOrder
    comentario?: SortOrder
  }

  export type avaliacoesMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nota?: SortOrder
    comentario?: SortOrder
  }

  export type avaliacoesSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    nota?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TrocasRelationFilter = {
    is?: trocasWhereInput
    isNot?: trocasWhereInput
  }

  export type UsuariosRelationFilter = {
    is?: usuariosWhereInput
    isNot?: usuariosWhereInput
  }

  export type historicotransacoesCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
  }

  export type historicotransacoesAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
  }

  export type historicotransacoesMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
  }

  export type historicotransacoesMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
  }

  export type historicotransacoesSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    troca_id?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TrocasListRelationFilter = {
    every?: trocasWhereInput
    some?: trocasWhereInput
    none?: trocasWhereInput
  }

  export type trocasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type livrosCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    titulo?: SortOrder
    autor?: SortOrder
    genero?: SortOrder
    ano_publicacao?: SortOrder
  }

  export type livrosAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    ano_publicacao?: SortOrder
  }

  export type livrosMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    titulo?: SortOrder
    autor?: SortOrder
    genero?: SortOrder
    ano_publicacao?: SortOrder
  }

  export type livrosMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    titulo?: SortOrder
    autor?: SortOrder
    genero?: SortOrder
    ano_publicacao?: SortOrder
  }

  export type livrosSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    ano_publicacao?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type mensagenschatCountOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    mensagem?: SortOrder
  }

  export type mensagenschatAvgOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type mensagenschatMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    mensagem?: SortOrder
  }

  export type mensagenschatMinOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
    mensagem?: SortOrder
  }

  export type mensagenschatSumOrderByAggregateInput = {
    id?: SortOrder
    usuario_id?: SortOrder
  }

  export type Enumstatus_enumFilter<$PrismaModel = never> = {
    equals?: $Enums.status_enum | Enumstatus_enumFieldRefInput<$PrismaModel>
    in?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    notIn?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    not?: NestedEnumstatus_enumFilter<$PrismaModel> | $Enums.status_enum
  }

  export type HistoricotransacoesListRelationFilter = {
    every?: historicotransacoesWhereInput
    some?: historicotransacoesWhereInput
    none?: historicotransacoesWhereInput
  }

  export type LivrosRelationFilter = {
    is?: livrosWhereInput
    isNot?: livrosWhereInput
  }

  export type historicotransacoesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type trocasCountOrderByAggregateInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
    status?: SortOrder
  }

  export type trocasAvgOrderByAggregateInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
  }

  export type trocasMaxOrderByAggregateInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
    status?: SortOrder
  }

  export type trocasMinOrderByAggregateInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
    status?: SortOrder
  }

  export type trocasSumOrderByAggregateInput = {
    id?: SortOrder
    livro_id?: SortOrder
    usuario_id?: SortOrder
  }

  export type Enumstatus_enumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status_enum | Enumstatus_enumFieldRefInput<$PrismaModel>
    in?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    notIn?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    not?: NestedEnumstatus_enumWithAggregatesFilter<$PrismaModel> | $Enums.status_enum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatus_enumFilter<$PrismaModel>
    _max?: NestedEnumstatus_enumFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type AvaliacoesListRelationFilter = {
    every?: avaliacoesWhereInput
    some?: avaliacoesWhereInput
    none?: avaliacoesWhereInput
  }

  export type LivrosListRelationFilter = {
    every?: livrosWhereInput
    some?: livrosWhereInput
    none?: livrosWhereInput
  }

  export type MensagenschatListRelationFilter = {
    every?: mensagenschatWhereInput
    some?: mensagenschatWhereInput
    none?: mensagenschatWhereInput
  }

  export type avaliacoesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type livrosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type mensagenschatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    reputacao?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
    reputacao?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    reputacao?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    reputacao?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
    reputacao?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type usuariosCreateNestedOneWithoutAvaliacoesInput = {
    create?: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutAvaliacoesInput
    connect?: usuariosWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type usuariosUpdateOneWithoutAvaliacoesNestedInput = {
    create?: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutAvaliacoesInput
    upsert?: usuariosUpsertWithoutAvaliacoesInput
    disconnect?: usuariosWhereInput | boolean
    delete?: usuariosWhereInput | boolean
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutAvaliacoesInput, usuariosUpdateWithoutAvaliacoesInput>, usuariosUncheckedUpdateWithoutAvaliacoesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type trocasCreateNestedOneWithoutHistoricotransacoesInput = {
    create?: XOR<trocasCreateWithoutHistoricotransacoesInput, trocasUncheckedCreateWithoutHistoricotransacoesInput>
    connectOrCreate?: trocasCreateOrConnectWithoutHistoricotransacoesInput
    connect?: trocasWhereUniqueInput
  }

  export type usuariosCreateNestedOneWithoutHistoricotransacoesInput = {
    create?: XOR<usuariosCreateWithoutHistoricotransacoesInput, usuariosUncheckedCreateWithoutHistoricotransacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutHistoricotransacoesInput
    connect?: usuariosWhereUniqueInput
  }

  export type trocasUpdateOneRequiredWithoutHistoricotransacoesNestedInput = {
    create?: XOR<trocasCreateWithoutHistoricotransacoesInput, trocasUncheckedCreateWithoutHistoricotransacoesInput>
    connectOrCreate?: trocasCreateOrConnectWithoutHistoricotransacoesInput
    upsert?: trocasUpsertWithoutHistoricotransacoesInput
    connect?: trocasWhereUniqueInput
    update?: XOR<XOR<trocasUpdateToOneWithWhereWithoutHistoricotransacoesInput, trocasUpdateWithoutHistoricotransacoesInput>, trocasUncheckedUpdateWithoutHistoricotransacoesInput>
  }

  export type usuariosUpdateOneRequiredWithoutHistoricotransacoesNestedInput = {
    create?: XOR<usuariosCreateWithoutHistoricotransacoesInput, usuariosUncheckedCreateWithoutHistoricotransacoesInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutHistoricotransacoesInput
    upsert?: usuariosUpsertWithoutHistoricotransacoesInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutHistoricotransacoesInput, usuariosUpdateWithoutHistoricotransacoesInput>, usuariosUncheckedUpdateWithoutHistoricotransacoesInput>
  }

  export type usuariosCreateNestedOneWithoutLivrosInput = {
    create?: XOR<usuariosCreateWithoutLivrosInput, usuariosUncheckedCreateWithoutLivrosInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutLivrosInput
    connect?: usuariosWhereUniqueInput
  }

  export type trocasCreateNestedManyWithoutLivrosInput = {
    create?: XOR<trocasCreateWithoutLivrosInput, trocasUncheckedCreateWithoutLivrosInput> | trocasCreateWithoutLivrosInput[] | trocasUncheckedCreateWithoutLivrosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutLivrosInput | trocasCreateOrConnectWithoutLivrosInput[]
    createMany?: trocasCreateManyLivrosInputEnvelope
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
  }

  export type trocasUncheckedCreateNestedManyWithoutLivrosInput = {
    create?: XOR<trocasCreateWithoutLivrosInput, trocasUncheckedCreateWithoutLivrosInput> | trocasCreateWithoutLivrosInput[] | trocasUncheckedCreateWithoutLivrosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutLivrosInput | trocasCreateOrConnectWithoutLivrosInput[]
    createMany?: trocasCreateManyLivrosInputEnvelope
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type usuariosUpdateOneRequiredWithoutLivrosNestedInput = {
    create?: XOR<usuariosCreateWithoutLivrosInput, usuariosUncheckedCreateWithoutLivrosInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutLivrosInput
    upsert?: usuariosUpsertWithoutLivrosInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutLivrosInput, usuariosUpdateWithoutLivrosInput>, usuariosUncheckedUpdateWithoutLivrosInput>
  }

  export type trocasUpdateManyWithoutLivrosNestedInput = {
    create?: XOR<trocasCreateWithoutLivrosInput, trocasUncheckedCreateWithoutLivrosInput> | trocasCreateWithoutLivrosInput[] | trocasUncheckedCreateWithoutLivrosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutLivrosInput | trocasCreateOrConnectWithoutLivrosInput[]
    upsert?: trocasUpsertWithWhereUniqueWithoutLivrosInput | trocasUpsertWithWhereUniqueWithoutLivrosInput[]
    createMany?: trocasCreateManyLivrosInputEnvelope
    set?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    disconnect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    delete?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    update?: trocasUpdateWithWhereUniqueWithoutLivrosInput | trocasUpdateWithWhereUniqueWithoutLivrosInput[]
    updateMany?: trocasUpdateManyWithWhereWithoutLivrosInput | trocasUpdateManyWithWhereWithoutLivrosInput[]
    deleteMany?: trocasScalarWhereInput | trocasScalarWhereInput[]
  }

  export type trocasUncheckedUpdateManyWithoutLivrosNestedInput = {
    create?: XOR<trocasCreateWithoutLivrosInput, trocasUncheckedCreateWithoutLivrosInput> | trocasCreateWithoutLivrosInput[] | trocasUncheckedCreateWithoutLivrosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutLivrosInput | trocasCreateOrConnectWithoutLivrosInput[]
    upsert?: trocasUpsertWithWhereUniqueWithoutLivrosInput | trocasUpsertWithWhereUniqueWithoutLivrosInput[]
    createMany?: trocasCreateManyLivrosInputEnvelope
    set?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    disconnect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    delete?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    update?: trocasUpdateWithWhereUniqueWithoutLivrosInput | trocasUpdateWithWhereUniqueWithoutLivrosInput[]
    updateMany?: trocasUpdateManyWithWhereWithoutLivrosInput | trocasUpdateManyWithWhereWithoutLivrosInput[]
    deleteMany?: trocasScalarWhereInput | trocasScalarWhereInput[]
  }

  export type usuariosCreateNestedOneWithoutMensagenschatInput = {
    create?: XOR<usuariosCreateWithoutMensagenschatInput, usuariosUncheckedCreateWithoutMensagenschatInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutMensagenschatInput
    connect?: usuariosWhereUniqueInput
  }

  export type usuariosUpdateOneRequiredWithoutMensagenschatNestedInput = {
    create?: XOR<usuariosCreateWithoutMensagenschatInput, usuariosUncheckedCreateWithoutMensagenschatInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutMensagenschatInput
    upsert?: usuariosUpsertWithoutMensagenschatInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutMensagenschatInput, usuariosUpdateWithoutMensagenschatInput>, usuariosUncheckedUpdateWithoutMensagenschatInput>
  }

  export type historicotransacoesCreateNestedManyWithoutTrocasInput = {
    create?: XOR<historicotransacoesCreateWithoutTrocasInput, historicotransacoesUncheckedCreateWithoutTrocasInput> | historicotransacoesCreateWithoutTrocasInput[] | historicotransacoesUncheckedCreateWithoutTrocasInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutTrocasInput | historicotransacoesCreateOrConnectWithoutTrocasInput[]
    createMany?: historicotransacoesCreateManyTrocasInputEnvelope
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
  }

  export type livrosCreateNestedOneWithoutTrocasInput = {
    create?: XOR<livrosCreateWithoutTrocasInput, livrosUncheckedCreateWithoutTrocasInput>
    connectOrCreate?: livrosCreateOrConnectWithoutTrocasInput
    connect?: livrosWhereUniqueInput
  }

  export type usuariosCreateNestedOneWithoutTrocasInput = {
    create?: XOR<usuariosCreateWithoutTrocasInput, usuariosUncheckedCreateWithoutTrocasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutTrocasInput
    connect?: usuariosWhereUniqueInput
  }

  export type historicotransacoesUncheckedCreateNestedManyWithoutTrocasInput = {
    create?: XOR<historicotransacoesCreateWithoutTrocasInput, historicotransacoesUncheckedCreateWithoutTrocasInput> | historicotransacoesCreateWithoutTrocasInput[] | historicotransacoesUncheckedCreateWithoutTrocasInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutTrocasInput | historicotransacoesCreateOrConnectWithoutTrocasInput[]
    createMany?: historicotransacoesCreateManyTrocasInputEnvelope
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
  }

  export type Enumstatus_enumFieldUpdateOperationsInput = {
    set?: $Enums.status_enum
  }

  export type historicotransacoesUpdateManyWithoutTrocasNestedInput = {
    create?: XOR<historicotransacoesCreateWithoutTrocasInput, historicotransacoesUncheckedCreateWithoutTrocasInput> | historicotransacoesCreateWithoutTrocasInput[] | historicotransacoesUncheckedCreateWithoutTrocasInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutTrocasInput | historicotransacoesCreateOrConnectWithoutTrocasInput[]
    upsert?: historicotransacoesUpsertWithWhereUniqueWithoutTrocasInput | historicotransacoesUpsertWithWhereUniqueWithoutTrocasInput[]
    createMany?: historicotransacoesCreateManyTrocasInputEnvelope
    set?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    disconnect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    delete?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    update?: historicotransacoesUpdateWithWhereUniqueWithoutTrocasInput | historicotransacoesUpdateWithWhereUniqueWithoutTrocasInput[]
    updateMany?: historicotransacoesUpdateManyWithWhereWithoutTrocasInput | historicotransacoesUpdateManyWithWhereWithoutTrocasInput[]
    deleteMany?: historicotransacoesScalarWhereInput | historicotransacoesScalarWhereInput[]
  }

  export type livrosUpdateOneRequiredWithoutTrocasNestedInput = {
    create?: XOR<livrosCreateWithoutTrocasInput, livrosUncheckedCreateWithoutTrocasInput>
    connectOrCreate?: livrosCreateOrConnectWithoutTrocasInput
    upsert?: livrosUpsertWithoutTrocasInput
    connect?: livrosWhereUniqueInput
    update?: XOR<XOR<livrosUpdateToOneWithWhereWithoutTrocasInput, livrosUpdateWithoutTrocasInput>, livrosUncheckedUpdateWithoutTrocasInput>
  }

  export type usuariosUpdateOneRequiredWithoutTrocasNestedInput = {
    create?: XOR<usuariosCreateWithoutTrocasInput, usuariosUncheckedCreateWithoutTrocasInput>
    connectOrCreate?: usuariosCreateOrConnectWithoutTrocasInput
    upsert?: usuariosUpsertWithoutTrocasInput
    connect?: usuariosWhereUniqueInput
    update?: XOR<XOR<usuariosUpdateToOneWithWhereWithoutTrocasInput, usuariosUpdateWithoutTrocasInput>, usuariosUncheckedUpdateWithoutTrocasInput>
  }

  export type historicotransacoesUncheckedUpdateManyWithoutTrocasNestedInput = {
    create?: XOR<historicotransacoesCreateWithoutTrocasInput, historicotransacoesUncheckedCreateWithoutTrocasInput> | historicotransacoesCreateWithoutTrocasInput[] | historicotransacoesUncheckedCreateWithoutTrocasInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutTrocasInput | historicotransacoesCreateOrConnectWithoutTrocasInput[]
    upsert?: historicotransacoesUpsertWithWhereUniqueWithoutTrocasInput | historicotransacoesUpsertWithWhereUniqueWithoutTrocasInput[]
    createMany?: historicotransacoesCreateManyTrocasInputEnvelope
    set?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    disconnect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    delete?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    update?: historicotransacoesUpdateWithWhereUniqueWithoutTrocasInput | historicotransacoesUpdateWithWhereUniqueWithoutTrocasInput[]
    updateMany?: historicotransacoesUpdateManyWithWhereWithoutTrocasInput | historicotransacoesUpdateManyWithWhereWithoutTrocasInput[]
    deleteMany?: historicotransacoesScalarWhereInput | historicotransacoesScalarWhereInput[]
  }

  export type avaliacoesCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput> | avaliacoesCreateWithoutUsuariosInput[] | avaliacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: avaliacoesCreateOrConnectWithoutUsuariosInput | avaliacoesCreateOrConnectWithoutUsuariosInput[]
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    connect?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
  }

  export type historicotransacoesCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<historicotransacoesCreateWithoutUsuariosInput, historicotransacoesUncheckedCreateWithoutUsuariosInput> | historicotransacoesCreateWithoutUsuariosInput[] | historicotransacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutUsuariosInput | historicotransacoesCreateOrConnectWithoutUsuariosInput[]
    createMany?: historicotransacoesCreateManyUsuariosInputEnvelope
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
  }

  export type livrosCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<livrosCreateWithoutUsuariosInput, livrosUncheckedCreateWithoutUsuariosInput> | livrosCreateWithoutUsuariosInput[] | livrosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: livrosCreateOrConnectWithoutUsuariosInput | livrosCreateOrConnectWithoutUsuariosInput[]
    createMany?: livrosCreateManyUsuariosInputEnvelope
    connect?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
  }

  export type mensagenschatCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<mensagenschatCreateWithoutUsuariosInput, mensagenschatUncheckedCreateWithoutUsuariosInput> | mensagenschatCreateWithoutUsuariosInput[] | mensagenschatUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: mensagenschatCreateOrConnectWithoutUsuariosInput | mensagenschatCreateOrConnectWithoutUsuariosInput[]
    createMany?: mensagenschatCreateManyUsuariosInputEnvelope
    connect?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
  }

  export type trocasCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<trocasCreateWithoutUsuariosInput, trocasUncheckedCreateWithoutUsuariosInput> | trocasCreateWithoutUsuariosInput[] | trocasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutUsuariosInput | trocasCreateOrConnectWithoutUsuariosInput[]
    createMany?: trocasCreateManyUsuariosInputEnvelope
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
  }

  export type avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput> | avaliacoesCreateWithoutUsuariosInput[] | avaliacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: avaliacoesCreateOrConnectWithoutUsuariosInput | avaliacoesCreateOrConnectWithoutUsuariosInput[]
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    connect?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
  }

  export type historicotransacoesUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<historicotransacoesCreateWithoutUsuariosInput, historicotransacoesUncheckedCreateWithoutUsuariosInput> | historicotransacoesCreateWithoutUsuariosInput[] | historicotransacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutUsuariosInput | historicotransacoesCreateOrConnectWithoutUsuariosInput[]
    createMany?: historicotransacoesCreateManyUsuariosInputEnvelope
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
  }

  export type livrosUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<livrosCreateWithoutUsuariosInput, livrosUncheckedCreateWithoutUsuariosInput> | livrosCreateWithoutUsuariosInput[] | livrosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: livrosCreateOrConnectWithoutUsuariosInput | livrosCreateOrConnectWithoutUsuariosInput[]
    createMany?: livrosCreateManyUsuariosInputEnvelope
    connect?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
  }

  export type mensagenschatUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<mensagenschatCreateWithoutUsuariosInput, mensagenschatUncheckedCreateWithoutUsuariosInput> | mensagenschatCreateWithoutUsuariosInput[] | mensagenschatUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: mensagenschatCreateOrConnectWithoutUsuariosInput | mensagenschatCreateOrConnectWithoutUsuariosInput[]
    createMany?: mensagenschatCreateManyUsuariosInputEnvelope
    connect?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
  }

  export type trocasUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<trocasCreateWithoutUsuariosInput, trocasUncheckedCreateWithoutUsuariosInput> | trocasCreateWithoutUsuariosInput[] | trocasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutUsuariosInput | trocasCreateOrConnectWithoutUsuariosInput[]
    createMany?: trocasCreateManyUsuariosInputEnvelope
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type avaliacoesUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput> | avaliacoesCreateWithoutUsuariosInput[] | avaliacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: avaliacoesCreateOrConnectWithoutUsuariosInput | avaliacoesCreateOrConnectWithoutUsuariosInput[]
    upsert?: avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput | avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    set?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    disconnect?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    delete?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    connect?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    update?: avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput | avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: avaliacoesUpdateManyWithWhereWithoutUsuariosInput | avaliacoesUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: avaliacoesScalarWhereInput | avaliacoesScalarWhereInput[]
  }

  export type historicotransacoesUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<historicotransacoesCreateWithoutUsuariosInput, historicotransacoesUncheckedCreateWithoutUsuariosInput> | historicotransacoesCreateWithoutUsuariosInput[] | historicotransacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutUsuariosInput | historicotransacoesCreateOrConnectWithoutUsuariosInput[]
    upsert?: historicotransacoesUpsertWithWhereUniqueWithoutUsuariosInput | historicotransacoesUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: historicotransacoesCreateManyUsuariosInputEnvelope
    set?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    disconnect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    delete?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    update?: historicotransacoesUpdateWithWhereUniqueWithoutUsuariosInput | historicotransacoesUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: historicotransacoesUpdateManyWithWhereWithoutUsuariosInput | historicotransacoesUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: historicotransacoesScalarWhereInput | historicotransacoesScalarWhereInput[]
  }

  export type livrosUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<livrosCreateWithoutUsuariosInput, livrosUncheckedCreateWithoutUsuariosInput> | livrosCreateWithoutUsuariosInput[] | livrosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: livrosCreateOrConnectWithoutUsuariosInput | livrosCreateOrConnectWithoutUsuariosInput[]
    upsert?: livrosUpsertWithWhereUniqueWithoutUsuariosInput | livrosUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: livrosCreateManyUsuariosInputEnvelope
    set?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    disconnect?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    delete?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    connect?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    update?: livrosUpdateWithWhereUniqueWithoutUsuariosInput | livrosUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: livrosUpdateManyWithWhereWithoutUsuariosInput | livrosUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: livrosScalarWhereInput | livrosScalarWhereInput[]
  }

  export type mensagenschatUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<mensagenschatCreateWithoutUsuariosInput, mensagenschatUncheckedCreateWithoutUsuariosInput> | mensagenschatCreateWithoutUsuariosInput[] | mensagenschatUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: mensagenschatCreateOrConnectWithoutUsuariosInput | mensagenschatCreateOrConnectWithoutUsuariosInput[]
    upsert?: mensagenschatUpsertWithWhereUniqueWithoutUsuariosInput | mensagenschatUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: mensagenschatCreateManyUsuariosInputEnvelope
    set?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    disconnect?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    delete?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    connect?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    update?: mensagenschatUpdateWithWhereUniqueWithoutUsuariosInput | mensagenschatUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: mensagenschatUpdateManyWithWhereWithoutUsuariosInput | mensagenschatUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: mensagenschatScalarWhereInput | mensagenschatScalarWhereInput[]
  }

  export type trocasUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<trocasCreateWithoutUsuariosInput, trocasUncheckedCreateWithoutUsuariosInput> | trocasCreateWithoutUsuariosInput[] | trocasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutUsuariosInput | trocasCreateOrConnectWithoutUsuariosInput[]
    upsert?: trocasUpsertWithWhereUniqueWithoutUsuariosInput | trocasUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: trocasCreateManyUsuariosInputEnvelope
    set?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    disconnect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    delete?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    update?: trocasUpdateWithWhereUniqueWithoutUsuariosInput | trocasUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: trocasUpdateManyWithWhereWithoutUsuariosInput | trocasUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: trocasScalarWhereInput | trocasScalarWhereInput[]
  }

  export type avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput> | avaliacoesCreateWithoutUsuariosInput[] | avaliacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: avaliacoesCreateOrConnectWithoutUsuariosInput | avaliacoesCreateOrConnectWithoutUsuariosInput[]
    upsert?: avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput | avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: avaliacoesCreateManyUsuariosInputEnvelope
    set?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    disconnect?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    delete?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    connect?: avaliacoesWhereUniqueInput | avaliacoesWhereUniqueInput[]
    update?: avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput | avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: avaliacoesUpdateManyWithWhereWithoutUsuariosInput | avaliacoesUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: avaliacoesScalarWhereInput | avaliacoesScalarWhereInput[]
  }

  export type historicotransacoesUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<historicotransacoesCreateWithoutUsuariosInput, historicotransacoesUncheckedCreateWithoutUsuariosInput> | historicotransacoesCreateWithoutUsuariosInput[] | historicotransacoesUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: historicotransacoesCreateOrConnectWithoutUsuariosInput | historicotransacoesCreateOrConnectWithoutUsuariosInput[]
    upsert?: historicotransacoesUpsertWithWhereUniqueWithoutUsuariosInput | historicotransacoesUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: historicotransacoesCreateManyUsuariosInputEnvelope
    set?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    disconnect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    delete?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    connect?: historicotransacoesWhereUniqueInput | historicotransacoesWhereUniqueInput[]
    update?: historicotransacoesUpdateWithWhereUniqueWithoutUsuariosInput | historicotransacoesUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: historicotransacoesUpdateManyWithWhereWithoutUsuariosInput | historicotransacoesUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: historicotransacoesScalarWhereInput | historicotransacoesScalarWhereInput[]
  }

  export type livrosUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<livrosCreateWithoutUsuariosInput, livrosUncheckedCreateWithoutUsuariosInput> | livrosCreateWithoutUsuariosInput[] | livrosUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: livrosCreateOrConnectWithoutUsuariosInput | livrosCreateOrConnectWithoutUsuariosInput[]
    upsert?: livrosUpsertWithWhereUniqueWithoutUsuariosInput | livrosUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: livrosCreateManyUsuariosInputEnvelope
    set?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    disconnect?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    delete?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    connect?: livrosWhereUniqueInput | livrosWhereUniqueInput[]
    update?: livrosUpdateWithWhereUniqueWithoutUsuariosInput | livrosUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: livrosUpdateManyWithWhereWithoutUsuariosInput | livrosUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: livrosScalarWhereInput | livrosScalarWhereInput[]
  }

  export type mensagenschatUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<mensagenschatCreateWithoutUsuariosInput, mensagenschatUncheckedCreateWithoutUsuariosInput> | mensagenschatCreateWithoutUsuariosInput[] | mensagenschatUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: mensagenschatCreateOrConnectWithoutUsuariosInput | mensagenschatCreateOrConnectWithoutUsuariosInput[]
    upsert?: mensagenschatUpsertWithWhereUniqueWithoutUsuariosInput | mensagenschatUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: mensagenschatCreateManyUsuariosInputEnvelope
    set?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    disconnect?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    delete?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    connect?: mensagenschatWhereUniqueInput | mensagenschatWhereUniqueInput[]
    update?: mensagenschatUpdateWithWhereUniqueWithoutUsuariosInput | mensagenschatUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: mensagenschatUpdateManyWithWhereWithoutUsuariosInput | mensagenschatUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: mensagenschatScalarWhereInput | mensagenschatScalarWhereInput[]
  }

  export type trocasUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<trocasCreateWithoutUsuariosInput, trocasUncheckedCreateWithoutUsuariosInput> | trocasCreateWithoutUsuariosInput[] | trocasUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: trocasCreateOrConnectWithoutUsuariosInput | trocasCreateOrConnectWithoutUsuariosInput[]
    upsert?: trocasUpsertWithWhereUniqueWithoutUsuariosInput | trocasUpsertWithWhereUniqueWithoutUsuariosInput[]
    createMany?: trocasCreateManyUsuariosInputEnvelope
    set?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    disconnect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    delete?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    connect?: trocasWhereUniqueInput | trocasWhereUniqueInput[]
    update?: trocasUpdateWithWhereUniqueWithoutUsuariosInput | trocasUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: trocasUpdateManyWithWhereWithoutUsuariosInput | trocasUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: trocasScalarWhereInput | trocasScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumstatus_enumFilter<$PrismaModel = never> = {
    equals?: $Enums.status_enum | Enumstatus_enumFieldRefInput<$PrismaModel>
    in?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    notIn?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    not?: NestedEnumstatus_enumFilter<$PrismaModel> | $Enums.status_enum
  }

  export type NestedEnumstatus_enumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status_enum | Enumstatus_enumFieldRefInput<$PrismaModel>
    in?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    notIn?: $Enums.status_enum[] | ListEnumstatus_enumFieldRefInput<$PrismaModel>
    not?: NestedEnumstatus_enumWithAggregatesFilter<$PrismaModel> | $Enums.status_enum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatus_enumFilter<$PrismaModel>
    _max?: NestedEnumstatus_enumFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type usuariosCreateWithoutAvaliacoesInput = {
    nome: string
    email: string
    senha: string
    reputacao?: number
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutUsuariosInput
    livros?: livrosCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatCreateNestedManyWithoutUsuariosInput
    trocas?: trocasCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutAvaliacoesInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutUsuariosInput
    livros?: livrosUncheckedCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatUncheckedCreateNestedManyWithoutUsuariosInput
    trocas?: trocasUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutAvaliacoesInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
  }

  export type usuariosUpsertWithoutAvaliacoesInput = {
    update: XOR<usuariosUpdateWithoutAvaliacoesInput, usuariosUncheckedUpdateWithoutAvaliacoesInput>
    create: XOR<usuariosCreateWithoutAvaliacoesInput, usuariosUncheckedCreateWithoutAvaliacoesInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutAvaliacoesInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutAvaliacoesInput, usuariosUncheckedUpdateWithoutAvaliacoesInput>
  }

  export type usuariosUpdateWithoutAvaliacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    historicotransacoes?: historicotransacoesUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutAvaliacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUncheckedUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUncheckedUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type trocasCreateWithoutHistoricotransacoesInput = {
    status?: $Enums.status_enum
    livros: livrosCreateNestedOneWithoutTrocasInput
    usuarios: usuariosCreateNestedOneWithoutTrocasInput
  }

  export type trocasUncheckedCreateWithoutHistoricotransacoesInput = {
    id?: number
    livro_id: number
    usuario_id: number
    status?: $Enums.status_enum
  }

  export type trocasCreateOrConnectWithoutHistoricotransacoesInput = {
    where: trocasWhereUniqueInput
    create: XOR<trocasCreateWithoutHistoricotransacoesInput, trocasUncheckedCreateWithoutHistoricotransacoesInput>
  }

  export type usuariosCreateWithoutHistoricotransacoesInput = {
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesCreateNestedManyWithoutUsuariosInput
    livros?: livrosCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatCreateNestedManyWithoutUsuariosInput
    trocas?: trocasCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutHistoricotransacoesInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput
    livros?: livrosUncheckedCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatUncheckedCreateNestedManyWithoutUsuariosInput
    trocas?: trocasUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutHistoricotransacoesInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutHistoricotransacoesInput, usuariosUncheckedCreateWithoutHistoricotransacoesInput>
  }

  export type trocasUpsertWithoutHistoricotransacoesInput = {
    update: XOR<trocasUpdateWithoutHistoricotransacoesInput, trocasUncheckedUpdateWithoutHistoricotransacoesInput>
    create: XOR<trocasCreateWithoutHistoricotransacoesInput, trocasUncheckedCreateWithoutHistoricotransacoesInput>
    where?: trocasWhereInput
  }

  export type trocasUpdateToOneWithWhereWithoutHistoricotransacoesInput = {
    where?: trocasWhereInput
    data: XOR<trocasUpdateWithoutHistoricotransacoesInput, trocasUncheckedUpdateWithoutHistoricotransacoesInput>
  }

  export type trocasUpdateWithoutHistoricotransacoesInput = {
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    livros?: livrosUpdateOneRequiredWithoutTrocasNestedInput
    usuarios?: usuariosUpdateOneRequiredWithoutTrocasNestedInput
  }

  export type trocasUncheckedUpdateWithoutHistoricotransacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    livro_id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
  }

  export type usuariosUpsertWithoutHistoricotransacoesInput = {
    update: XOR<usuariosUpdateWithoutHistoricotransacoesInput, usuariosUncheckedUpdateWithoutHistoricotransacoesInput>
    create: XOR<usuariosCreateWithoutHistoricotransacoesInput, usuariosUncheckedCreateWithoutHistoricotransacoesInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutHistoricotransacoesInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutHistoricotransacoesInput, usuariosUncheckedUpdateWithoutHistoricotransacoesInput>
  }

  export type usuariosUpdateWithoutHistoricotransacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutHistoricotransacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUncheckedUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUncheckedUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosCreateWithoutLivrosInput = {
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatCreateNestedManyWithoutUsuariosInput
    trocas?: trocasCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutLivrosInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatUncheckedCreateNestedManyWithoutUsuariosInput
    trocas?: trocasUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutLivrosInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutLivrosInput, usuariosUncheckedCreateWithoutLivrosInput>
  }

  export type trocasCreateWithoutLivrosInput = {
    status?: $Enums.status_enum
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutTrocasInput
    usuarios: usuariosCreateNestedOneWithoutTrocasInput
  }

  export type trocasUncheckedCreateWithoutLivrosInput = {
    id?: number
    usuario_id: number
    status?: $Enums.status_enum
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutTrocasInput
  }

  export type trocasCreateOrConnectWithoutLivrosInput = {
    where: trocasWhereUniqueInput
    create: XOR<trocasCreateWithoutLivrosInput, trocasUncheckedCreateWithoutLivrosInput>
  }

  export type trocasCreateManyLivrosInputEnvelope = {
    data: trocasCreateManyLivrosInput | trocasCreateManyLivrosInput[]
    skipDuplicates?: boolean
  }

  export type usuariosUpsertWithoutLivrosInput = {
    update: XOR<usuariosUpdateWithoutLivrosInput, usuariosUncheckedUpdateWithoutLivrosInput>
    create: XOR<usuariosCreateWithoutLivrosInput, usuariosUncheckedCreateWithoutLivrosInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutLivrosInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutLivrosInput, usuariosUncheckedUpdateWithoutLivrosInput>
  }

  export type usuariosUpdateWithoutLivrosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutLivrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUncheckedUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type trocasUpsertWithWhereUniqueWithoutLivrosInput = {
    where: trocasWhereUniqueInput
    update: XOR<trocasUpdateWithoutLivrosInput, trocasUncheckedUpdateWithoutLivrosInput>
    create: XOR<trocasCreateWithoutLivrosInput, trocasUncheckedCreateWithoutLivrosInput>
  }

  export type trocasUpdateWithWhereUniqueWithoutLivrosInput = {
    where: trocasWhereUniqueInput
    data: XOR<trocasUpdateWithoutLivrosInput, trocasUncheckedUpdateWithoutLivrosInput>
  }

  export type trocasUpdateManyWithWhereWithoutLivrosInput = {
    where: trocasScalarWhereInput
    data: XOR<trocasUpdateManyMutationInput, trocasUncheckedUpdateManyWithoutLivrosInput>
  }

  export type trocasScalarWhereInput = {
    AND?: trocasScalarWhereInput | trocasScalarWhereInput[]
    OR?: trocasScalarWhereInput[]
    NOT?: trocasScalarWhereInput | trocasScalarWhereInput[]
    id?: IntFilter<"trocas"> | number
    livro_id?: IntFilter<"trocas"> | number
    usuario_id?: IntFilter<"trocas"> | number
    status?: Enumstatus_enumFilter<"trocas"> | $Enums.status_enum
  }

  export type usuariosCreateWithoutMensagenschatInput = {
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutUsuariosInput
    livros?: livrosCreateNestedManyWithoutUsuariosInput
    trocas?: trocasCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutMensagenschatInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutUsuariosInput
    livros?: livrosUncheckedCreateNestedManyWithoutUsuariosInput
    trocas?: trocasUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutMensagenschatInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutMensagenschatInput, usuariosUncheckedCreateWithoutMensagenschatInput>
  }

  export type usuariosUpsertWithoutMensagenschatInput = {
    update: XOR<usuariosUpdateWithoutMensagenschatInput, usuariosUncheckedUpdateWithoutMensagenschatInput>
    create: XOR<usuariosCreateWithoutMensagenschatInput, usuariosUncheckedCreateWithoutMensagenschatInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutMensagenschatInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutMensagenschatInput, usuariosUncheckedUpdateWithoutMensagenschatInput>
  }

  export type usuariosUpdateWithoutMensagenschatInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutMensagenschatInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUncheckedUpdateManyWithoutUsuariosNestedInput
    trocas?: trocasUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type historicotransacoesCreateWithoutTrocasInput = {
    usuarios: usuariosCreateNestedOneWithoutHistoricotransacoesInput
  }

  export type historicotransacoesUncheckedCreateWithoutTrocasInput = {
    id?: number
    usuario_id: number
  }

  export type historicotransacoesCreateOrConnectWithoutTrocasInput = {
    where: historicotransacoesWhereUniqueInput
    create: XOR<historicotransacoesCreateWithoutTrocasInput, historicotransacoesUncheckedCreateWithoutTrocasInput>
  }

  export type historicotransacoesCreateManyTrocasInputEnvelope = {
    data: historicotransacoesCreateManyTrocasInput | historicotransacoesCreateManyTrocasInput[]
    skipDuplicates?: boolean
  }

  export type livrosCreateWithoutTrocasInput = {
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
    usuarios: usuariosCreateNestedOneWithoutLivrosInput
  }

  export type livrosUncheckedCreateWithoutTrocasInput = {
    id?: number
    usuario_id: number
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
  }

  export type livrosCreateOrConnectWithoutTrocasInput = {
    where: livrosWhereUniqueInput
    create: XOR<livrosCreateWithoutTrocasInput, livrosUncheckedCreateWithoutTrocasInput>
  }

  export type usuariosCreateWithoutTrocasInput = {
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutUsuariosInput
    livros?: livrosCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosUncheckedCreateWithoutTrocasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    reputacao?: number
    avaliacoes?: avaliacoesUncheckedCreateNestedManyWithoutUsuariosInput
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutUsuariosInput
    livros?: livrosUncheckedCreateNestedManyWithoutUsuariosInput
    mensagenschat?: mensagenschatUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type usuariosCreateOrConnectWithoutTrocasInput = {
    where: usuariosWhereUniqueInput
    create: XOR<usuariosCreateWithoutTrocasInput, usuariosUncheckedCreateWithoutTrocasInput>
  }

  export type historicotransacoesUpsertWithWhereUniqueWithoutTrocasInput = {
    where: historicotransacoesWhereUniqueInput
    update: XOR<historicotransacoesUpdateWithoutTrocasInput, historicotransacoesUncheckedUpdateWithoutTrocasInput>
    create: XOR<historicotransacoesCreateWithoutTrocasInput, historicotransacoesUncheckedCreateWithoutTrocasInput>
  }

  export type historicotransacoesUpdateWithWhereUniqueWithoutTrocasInput = {
    where: historicotransacoesWhereUniqueInput
    data: XOR<historicotransacoesUpdateWithoutTrocasInput, historicotransacoesUncheckedUpdateWithoutTrocasInput>
  }

  export type historicotransacoesUpdateManyWithWhereWithoutTrocasInput = {
    where: historicotransacoesScalarWhereInput
    data: XOR<historicotransacoesUpdateManyMutationInput, historicotransacoesUncheckedUpdateManyWithoutTrocasInput>
  }

  export type historicotransacoesScalarWhereInput = {
    AND?: historicotransacoesScalarWhereInput | historicotransacoesScalarWhereInput[]
    OR?: historicotransacoesScalarWhereInput[]
    NOT?: historicotransacoesScalarWhereInput | historicotransacoesScalarWhereInput[]
    id?: IntFilter<"historicotransacoes"> | number
    usuario_id?: IntFilter<"historicotransacoes"> | number
    troca_id?: IntFilter<"historicotransacoes"> | number
  }

  export type livrosUpsertWithoutTrocasInput = {
    update: XOR<livrosUpdateWithoutTrocasInput, livrosUncheckedUpdateWithoutTrocasInput>
    create: XOR<livrosCreateWithoutTrocasInput, livrosUncheckedCreateWithoutTrocasInput>
    where?: livrosWhereInput
  }

  export type livrosUpdateToOneWithWhereWithoutTrocasInput = {
    where?: livrosWhereInput
    data: XOR<livrosUpdateWithoutTrocasInput, livrosUncheckedUpdateWithoutTrocasInput>
  }

  export type livrosUpdateWithoutTrocasInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
    usuarios?: usuariosUpdateOneRequiredWithoutLivrosNestedInput
  }

  export type livrosUncheckedUpdateWithoutTrocasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
  }

  export type usuariosUpsertWithoutTrocasInput = {
    update: XOR<usuariosUpdateWithoutTrocasInput, usuariosUncheckedUpdateWithoutTrocasInput>
    create: XOR<usuariosCreateWithoutTrocasInput, usuariosUncheckedCreateWithoutTrocasInput>
    where?: usuariosWhereInput
  }

  export type usuariosUpdateToOneWithWhereWithoutTrocasInput = {
    where?: usuariosWhereInput
    data: XOR<usuariosUpdateWithoutTrocasInput, usuariosUncheckedUpdateWithoutTrocasInput>
  }

  export type usuariosUpdateWithoutTrocasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUpdateManyWithoutUsuariosNestedInput
  }

  export type usuariosUncheckedUpdateWithoutTrocasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    reputacao?: FloatFieldUpdateOperationsInput | number
    avaliacoes?: avaliacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutUsuariosNestedInput
    livros?: livrosUncheckedUpdateManyWithoutUsuariosNestedInput
    mensagenschat?: mensagenschatUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type avaliacoesCreateWithoutUsuariosInput = {
    nota?: number | null
    comentario?: string | null
  }

  export type avaliacoesUncheckedCreateWithoutUsuariosInput = {
    id?: number
    nota?: number | null
    comentario?: string | null
  }

  export type avaliacoesCreateOrConnectWithoutUsuariosInput = {
    where: avaliacoesWhereUniqueInput
    create: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput>
  }

  export type avaliacoesCreateManyUsuariosInputEnvelope = {
    data: avaliacoesCreateManyUsuariosInput | avaliacoesCreateManyUsuariosInput[]
    skipDuplicates?: boolean
  }

  export type historicotransacoesCreateWithoutUsuariosInput = {
    trocas: trocasCreateNestedOneWithoutHistoricotransacoesInput
  }

  export type historicotransacoesUncheckedCreateWithoutUsuariosInput = {
    id?: number
    troca_id: number
  }

  export type historicotransacoesCreateOrConnectWithoutUsuariosInput = {
    where: historicotransacoesWhereUniqueInput
    create: XOR<historicotransacoesCreateWithoutUsuariosInput, historicotransacoesUncheckedCreateWithoutUsuariosInput>
  }

  export type historicotransacoesCreateManyUsuariosInputEnvelope = {
    data: historicotransacoesCreateManyUsuariosInput | historicotransacoesCreateManyUsuariosInput[]
    skipDuplicates?: boolean
  }

  export type livrosCreateWithoutUsuariosInput = {
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
    trocas?: trocasCreateNestedManyWithoutLivrosInput
  }

  export type livrosUncheckedCreateWithoutUsuariosInput = {
    id?: number
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
    trocas?: trocasUncheckedCreateNestedManyWithoutLivrosInput
  }

  export type livrosCreateOrConnectWithoutUsuariosInput = {
    where: livrosWhereUniqueInput
    create: XOR<livrosCreateWithoutUsuariosInput, livrosUncheckedCreateWithoutUsuariosInput>
  }

  export type livrosCreateManyUsuariosInputEnvelope = {
    data: livrosCreateManyUsuariosInput | livrosCreateManyUsuariosInput[]
    skipDuplicates?: boolean
  }

  export type mensagenschatCreateWithoutUsuariosInput = {
    mensagem: string
  }

  export type mensagenschatUncheckedCreateWithoutUsuariosInput = {
    id?: number
    mensagem: string
  }

  export type mensagenschatCreateOrConnectWithoutUsuariosInput = {
    where: mensagenschatWhereUniqueInput
    create: XOR<mensagenschatCreateWithoutUsuariosInput, mensagenschatUncheckedCreateWithoutUsuariosInput>
  }

  export type mensagenschatCreateManyUsuariosInputEnvelope = {
    data: mensagenschatCreateManyUsuariosInput | mensagenschatCreateManyUsuariosInput[]
    skipDuplicates?: boolean
  }

  export type trocasCreateWithoutUsuariosInput = {
    status?: $Enums.status_enum
    historicotransacoes?: historicotransacoesCreateNestedManyWithoutTrocasInput
    livros: livrosCreateNestedOneWithoutTrocasInput
  }

  export type trocasUncheckedCreateWithoutUsuariosInput = {
    id?: number
    livro_id: number
    status?: $Enums.status_enum
    historicotransacoes?: historicotransacoesUncheckedCreateNestedManyWithoutTrocasInput
  }

  export type trocasCreateOrConnectWithoutUsuariosInput = {
    where: trocasWhereUniqueInput
    create: XOR<trocasCreateWithoutUsuariosInput, trocasUncheckedCreateWithoutUsuariosInput>
  }

  export type trocasCreateManyUsuariosInputEnvelope = {
    data: trocasCreateManyUsuariosInput | trocasCreateManyUsuariosInput[]
    skipDuplicates?: boolean
  }

  export type avaliacoesUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: avaliacoesWhereUniqueInput
    update: XOR<avaliacoesUpdateWithoutUsuariosInput, avaliacoesUncheckedUpdateWithoutUsuariosInput>
    create: XOR<avaliacoesCreateWithoutUsuariosInput, avaliacoesUncheckedCreateWithoutUsuariosInput>
  }

  export type avaliacoesUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: avaliacoesWhereUniqueInput
    data: XOR<avaliacoesUpdateWithoutUsuariosInput, avaliacoesUncheckedUpdateWithoutUsuariosInput>
  }

  export type avaliacoesUpdateManyWithWhereWithoutUsuariosInput = {
    where: avaliacoesScalarWhereInput
    data: XOR<avaliacoesUpdateManyMutationInput, avaliacoesUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type avaliacoesScalarWhereInput = {
    AND?: avaliacoesScalarWhereInput | avaliacoesScalarWhereInput[]
    OR?: avaliacoesScalarWhereInput[]
    NOT?: avaliacoesScalarWhereInput | avaliacoesScalarWhereInput[]
    id?: IntFilter<"avaliacoes"> | number
    usuario_id?: IntNullableFilter<"avaliacoes"> | number | null
    nota?: IntNullableFilter<"avaliacoes"> | number | null
    comentario?: StringNullableFilter<"avaliacoes"> | string | null
  }

  export type historicotransacoesUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: historicotransacoesWhereUniqueInput
    update: XOR<historicotransacoesUpdateWithoutUsuariosInput, historicotransacoesUncheckedUpdateWithoutUsuariosInput>
    create: XOR<historicotransacoesCreateWithoutUsuariosInput, historicotransacoesUncheckedCreateWithoutUsuariosInput>
  }

  export type historicotransacoesUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: historicotransacoesWhereUniqueInput
    data: XOR<historicotransacoesUpdateWithoutUsuariosInput, historicotransacoesUncheckedUpdateWithoutUsuariosInput>
  }

  export type historicotransacoesUpdateManyWithWhereWithoutUsuariosInput = {
    where: historicotransacoesScalarWhereInput
    data: XOR<historicotransacoesUpdateManyMutationInput, historicotransacoesUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type livrosUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: livrosWhereUniqueInput
    update: XOR<livrosUpdateWithoutUsuariosInput, livrosUncheckedUpdateWithoutUsuariosInput>
    create: XOR<livrosCreateWithoutUsuariosInput, livrosUncheckedCreateWithoutUsuariosInput>
  }

  export type livrosUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: livrosWhereUniqueInput
    data: XOR<livrosUpdateWithoutUsuariosInput, livrosUncheckedUpdateWithoutUsuariosInput>
  }

  export type livrosUpdateManyWithWhereWithoutUsuariosInput = {
    where: livrosScalarWhereInput
    data: XOR<livrosUpdateManyMutationInput, livrosUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type livrosScalarWhereInput = {
    AND?: livrosScalarWhereInput | livrosScalarWhereInput[]
    OR?: livrosScalarWhereInput[]
    NOT?: livrosScalarWhereInput | livrosScalarWhereInput[]
    id?: IntFilter<"livros"> | number
    usuario_id?: IntFilter<"livros"> | number
    titulo?: StringFilter<"livros"> | string
    autor?: StringFilter<"livros"> | string
    genero?: StringFilter<"livros"> | string
    ano_publicacao?: IntFilter<"livros"> | number
  }

  export type mensagenschatUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: mensagenschatWhereUniqueInput
    update: XOR<mensagenschatUpdateWithoutUsuariosInput, mensagenschatUncheckedUpdateWithoutUsuariosInput>
    create: XOR<mensagenschatCreateWithoutUsuariosInput, mensagenschatUncheckedCreateWithoutUsuariosInput>
  }

  export type mensagenschatUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: mensagenschatWhereUniqueInput
    data: XOR<mensagenschatUpdateWithoutUsuariosInput, mensagenschatUncheckedUpdateWithoutUsuariosInput>
  }

  export type mensagenschatUpdateManyWithWhereWithoutUsuariosInput = {
    where: mensagenschatScalarWhereInput
    data: XOR<mensagenschatUpdateManyMutationInput, mensagenschatUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type mensagenschatScalarWhereInput = {
    AND?: mensagenschatScalarWhereInput | mensagenschatScalarWhereInput[]
    OR?: mensagenschatScalarWhereInput[]
    NOT?: mensagenschatScalarWhereInput | mensagenschatScalarWhereInput[]
    id?: IntFilter<"mensagenschat"> | number
    usuario_id?: IntFilter<"mensagenschat"> | number
    mensagem?: StringFilter<"mensagenschat"> | string
  }

  export type trocasUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: trocasWhereUniqueInput
    update: XOR<trocasUpdateWithoutUsuariosInput, trocasUncheckedUpdateWithoutUsuariosInput>
    create: XOR<trocasCreateWithoutUsuariosInput, trocasUncheckedCreateWithoutUsuariosInput>
  }

  export type trocasUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: trocasWhereUniqueInput
    data: XOR<trocasUpdateWithoutUsuariosInput, trocasUncheckedUpdateWithoutUsuariosInput>
  }

  export type trocasUpdateManyWithWhereWithoutUsuariosInput = {
    where: trocasScalarWhereInput
    data: XOR<trocasUpdateManyMutationInput, trocasUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type trocasCreateManyLivrosInput = {
    id?: number
    usuario_id: number
    status?: $Enums.status_enum
  }

  export type trocasUpdateWithoutLivrosInput = {
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    historicotransacoes?: historicotransacoesUpdateManyWithoutTrocasNestedInput
    usuarios?: usuariosUpdateOneRequiredWithoutTrocasNestedInput
  }

  export type trocasUncheckedUpdateWithoutLivrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutTrocasNestedInput
  }

  export type trocasUncheckedUpdateManyWithoutLivrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
  }

  export type historicotransacoesCreateManyTrocasInput = {
    id?: number
    usuario_id: number
  }

  export type historicotransacoesUpdateWithoutTrocasInput = {
    usuarios?: usuariosUpdateOneRequiredWithoutHistoricotransacoesNestedInput
  }

  export type historicotransacoesUncheckedUpdateWithoutTrocasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
  }

  export type historicotransacoesUncheckedUpdateManyWithoutTrocasInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario_id?: IntFieldUpdateOperationsInput | number
  }

  export type avaliacoesCreateManyUsuariosInput = {
    id?: number
    nota?: number | null
    comentario?: string | null
  }

  export type historicotransacoesCreateManyUsuariosInput = {
    id?: number
    troca_id: number
  }

  export type livrosCreateManyUsuariosInput = {
    id?: number
    titulo: string
    autor: string
    genero: string
    ano_publicacao: number
  }

  export type mensagenschatCreateManyUsuariosInput = {
    id?: number
    mensagem: string
  }

  export type trocasCreateManyUsuariosInput = {
    id?: number
    livro_id: number
    status?: $Enums.status_enum
  }

  export type avaliacoesUpdateWithoutUsuariosInput = {
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avaliacoesUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type avaliacoesUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nota?: NullableIntFieldUpdateOperationsInput | number | null
    comentario?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type historicotransacoesUpdateWithoutUsuariosInput = {
    trocas?: trocasUpdateOneRequiredWithoutHistoricotransacoesNestedInput
  }

  export type historicotransacoesUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    troca_id?: IntFieldUpdateOperationsInput | number
  }

  export type historicotransacoesUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    troca_id?: IntFieldUpdateOperationsInput | number
  }

  export type livrosUpdateWithoutUsuariosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
    trocas?: trocasUpdateManyWithoutLivrosNestedInput
  }

  export type livrosUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
    trocas?: trocasUncheckedUpdateManyWithoutLivrosNestedInput
  }

  export type livrosUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    autor?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    ano_publicacao?: IntFieldUpdateOperationsInput | number
  }

  export type mensagenschatUpdateWithoutUsuariosInput = {
    mensagem?: StringFieldUpdateOperationsInput | string
  }

  export type mensagenschatUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
  }

  export type mensagenschatUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    mensagem?: StringFieldUpdateOperationsInput | string
  }

  export type trocasUpdateWithoutUsuariosInput = {
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    historicotransacoes?: historicotransacoesUpdateManyWithoutTrocasNestedInput
    livros?: livrosUpdateOneRequiredWithoutTrocasNestedInput
  }

  export type trocasUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    livro_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
    historicotransacoes?: historicotransacoesUncheckedUpdateManyWithoutTrocasNestedInput
  }

  export type trocasUncheckedUpdateManyWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    livro_id?: IntFieldUpdateOperationsInput | number
    status?: Enumstatus_enumFieldUpdateOperationsInput | $Enums.status_enum
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LivrosCountOutputTypeDefaultArgs instead
     */
    export type LivrosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LivrosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrocasCountOutputTypeDefaultArgs instead
     */
    export type TrocasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TrocasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuariosCountOutputTypeDefaultArgs instead
     */
    export type UsuariosCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuariosCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use avaliacoesDefaultArgs instead
     */
    export type avaliacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = avaliacoesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use historicotransacoesDefaultArgs instead
     */
    export type historicotransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = historicotransacoesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use livrosDefaultArgs instead
     */
    export type livrosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = livrosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use mensagenschatDefaultArgs instead
     */
    export type mensagenschatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = mensagenschatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use trocasDefaultArgs instead
     */
    export type trocasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = trocasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usuariosDefaultArgs instead
     */
    export type usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usuariosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}